// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dbmodels

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/aarondl/null/v8"
	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/sqlboiler/v4/queries/qm"
	"github.com/aarondl/sqlboiler/v4/queries/qmhelper"
	"github.com/aarondl/strmangle"
	"github.com/friendsofgo/errors"
)

// Evaluation is an object representing the database table.
type Evaluation struct {
	ID                string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	PatientName       string      `boil:"patient_name" json:"patient_name" toml:"patient_name" yaml:"patient_name"`
	PatientAge        int         `boil:"patient_age" json:"patient_age" toml:"patient_age" yaml:"patient_age"`
	SpecialistMail    string      `boil:"specialist_mail" json:"specialist_mail" toml:"specialist_mail" yaml:"specialist_mail"`
	SpecialistID      string      `boil:"specialist_id" json:"specialist_id" toml:"specialist_id" yaml:"specialist_id"`
	AssistantAnalysis null.String `boil:"assistant_analysis" json:"assistant_analysis,omitempty" toml:"assistant_analysis" yaml:"assistant_analysis,omitempty"`
	StorageURL        null.String `boil:"storage_url" json:"storage_url,omitempty" toml:"storage_url" yaml:"storage_url,omitempty"`
	StorageKey        null.String `boil:"storage_key" json:"storage_key,omitempty" toml:"storage_key" yaml:"storage_key,omitempty"`
	CurrentStatus     string      `boil:"current_status" json:"current_status" toml:"current_status" yaml:"current_status"`
	CreatedAt         time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt         time.Time   `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *evaluationR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L evaluationL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var EvaluationColumns = struct {
	ID                string
	PatientName       string
	PatientAge        string
	SpecialistMail    string
	SpecialistID      string
	AssistantAnalysis string
	StorageURL        string
	StorageKey        string
	CurrentStatus     string
	CreatedAt         string
	UpdatedAt         string
}{
	ID:                "id",
	PatientName:       "patient_name",
	PatientAge:        "patient_age",
	SpecialistMail:    "specialist_mail",
	SpecialistID:      "specialist_id",
	AssistantAnalysis: "assistant_analysis",
	StorageURL:        "storage_url",
	StorageKey:        "storage_key",
	CurrentStatus:     "current_status",
	CreatedAt:         "created_at",
	UpdatedAt:         "updated_at",
}

var EvaluationTableColumns = struct {
	ID                string
	PatientName       string
	PatientAge        string
	SpecialistMail    string
	SpecialistID      string
	AssistantAnalysis string
	StorageURL        string
	StorageKey        string
	CurrentStatus     string
	CreatedAt         string
	UpdatedAt         string
}{
	ID:                "evaluations.id",
	PatientName:       "evaluations.patient_name",
	PatientAge:        "evaluations.patient_age",
	SpecialistMail:    "evaluations.specialist_mail",
	SpecialistID:      "evaluations.specialist_id",
	AssistantAnalysis: "evaluations.assistant_analysis",
	StorageURL:        "evaluations.storage_url",
	StorageKey:        "evaluations.storage_key",
	CurrentStatus:     "evaluations.current_status",
	CreatedAt:         "evaluations.created_at",
	UpdatedAt:         "evaluations.updated_at",
}

// Generated where

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_String) LIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" LIKE ?", x)
}
func (w whereHelpernull_String) NLIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT LIKE ?", x)
}
func (w whereHelpernull_String) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_String) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var EvaluationWhere = struct {
	ID                whereHelperstring
	PatientName       whereHelperstring
	PatientAge        whereHelperint
	SpecialistMail    whereHelperstring
	SpecialistID      whereHelperstring
	AssistantAnalysis whereHelpernull_String
	StorageURL        whereHelpernull_String
	StorageKey        whereHelpernull_String
	CurrentStatus     whereHelperstring
	CreatedAt         whereHelpertime_Time
	UpdatedAt         whereHelpertime_Time
}{
	ID:                whereHelperstring{field: "`evaluations`.`id`"},
	PatientName:       whereHelperstring{field: "`evaluations`.`patient_name`"},
	PatientAge:        whereHelperint{field: "`evaluations`.`patient_age`"},
	SpecialistMail:    whereHelperstring{field: "`evaluations`.`specialist_mail`"},
	SpecialistID:      whereHelperstring{field: "`evaluations`.`specialist_id`"},
	AssistantAnalysis: whereHelpernull_String{field: "`evaluations`.`assistant_analysis`"},
	StorageURL:        whereHelpernull_String{field: "`evaluations`.`storage_url`"},
	StorageKey:        whereHelpernull_String{field: "`evaluations`.`storage_key`"},
	CurrentStatus:     whereHelperstring{field: "`evaluations`.`current_status`"},
	CreatedAt:         whereHelpertime_Time{field: "`evaluations`.`created_at`"},
	UpdatedAt:         whereHelpertime_Time{field: "`evaluations`.`updated_at`"},
}

// EvaluationRels is where relationship names are stored.
var EvaluationRels = struct {
	Specialist                  string
	ExecutiveFunctionsSubtests  string
	LanguageFluencies           string
	LettersCancellationSubtests string
	VerbalMemorySubtests        string
	VisualMemorySubtests        string
}{
	Specialist:                  "Specialist",
	ExecutiveFunctionsSubtests:  "ExecutiveFunctionsSubtests",
	LanguageFluencies:           "LanguageFluencies",
	LettersCancellationSubtests: "LettersCancellationSubtests",
	VerbalMemorySubtests:        "VerbalMemorySubtests",
	VisualMemorySubtests:        "VisualMemorySubtests",
}

// evaluationR is where relationships are stored.
type evaluationR struct {
	Specialist                  *User                           `boil:"Specialist" json:"Specialist" toml:"Specialist" yaml:"Specialist"`
	ExecutiveFunctionsSubtests  ExecutiveFunctionsSubtestSlice  `boil:"ExecutiveFunctionsSubtests" json:"ExecutiveFunctionsSubtests" toml:"ExecutiveFunctionsSubtests" yaml:"ExecutiveFunctionsSubtests"`
	LanguageFluencies           LanguageFluencySlice            `boil:"LanguageFluencies" json:"LanguageFluencies" toml:"LanguageFluencies" yaml:"LanguageFluencies"`
	LettersCancellationSubtests LettersCancellationSubtestSlice `boil:"LettersCancellationSubtests" json:"LettersCancellationSubtests" toml:"LettersCancellationSubtests" yaml:"LettersCancellationSubtests"`
	VerbalMemorySubtests        VerbalMemorySubtestSlice        `boil:"VerbalMemorySubtests" json:"VerbalMemorySubtests" toml:"VerbalMemorySubtests" yaml:"VerbalMemorySubtests"`
	VisualMemorySubtests        VisualMemorySubtestSlice        `boil:"VisualMemorySubtests" json:"VisualMemorySubtests" toml:"VisualMemorySubtests" yaml:"VisualMemorySubtests"`
}

// NewStruct creates a new relationship struct
func (*evaluationR) NewStruct() *evaluationR {
	return &evaluationR{}
}

func (o *Evaluation) GetSpecialist() *User {
	if o == nil {
		return nil
	}

	return o.R.GetSpecialist()
}

func (r *evaluationR) GetSpecialist() *User {
	if r == nil {
		return nil
	}

	return r.Specialist
}

func (o *Evaluation) GetExecutiveFunctionsSubtests() ExecutiveFunctionsSubtestSlice {
	if o == nil {
		return nil
	}

	return o.R.GetExecutiveFunctionsSubtests()
}

func (r *evaluationR) GetExecutiveFunctionsSubtests() ExecutiveFunctionsSubtestSlice {
	if r == nil {
		return nil
	}

	return r.ExecutiveFunctionsSubtests
}

func (o *Evaluation) GetLanguageFluencies() LanguageFluencySlice {
	if o == nil {
		return nil
	}

	return o.R.GetLanguageFluencies()
}

func (r *evaluationR) GetLanguageFluencies() LanguageFluencySlice {
	if r == nil {
		return nil
	}

	return r.LanguageFluencies
}

func (o *Evaluation) GetLettersCancellationSubtests() LettersCancellationSubtestSlice {
	if o == nil {
		return nil
	}

	return o.R.GetLettersCancellationSubtests()
}

func (r *evaluationR) GetLettersCancellationSubtests() LettersCancellationSubtestSlice {
	if r == nil {
		return nil
	}

	return r.LettersCancellationSubtests
}

func (o *Evaluation) GetVerbalMemorySubtests() VerbalMemorySubtestSlice {
	if o == nil {
		return nil
	}

	return o.R.GetVerbalMemorySubtests()
}

func (r *evaluationR) GetVerbalMemorySubtests() VerbalMemorySubtestSlice {
	if r == nil {
		return nil
	}

	return r.VerbalMemorySubtests
}

func (o *Evaluation) GetVisualMemorySubtests() VisualMemorySubtestSlice {
	if o == nil {
		return nil
	}

	return o.R.GetVisualMemorySubtests()
}

func (r *evaluationR) GetVisualMemorySubtests() VisualMemorySubtestSlice {
	if r == nil {
		return nil
	}

	return r.VisualMemorySubtests
}

// evaluationL is where Load methods for each relationship are stored.
type evaluationL struct{}

var (
	evaluationAllColumns            = []string{"id", "patient_name", "patient_age", "specialist_mail", "specialist_id", "assistant_analysis", "storage_url", "storage_key", "current_status", "created_at", "updated_at"}
	evaluationColumnsWithoutDefault = []string{"id", "patient_name", "patient_age", "specialist_mail", "specialist_id", "assistant_analysis", "storage_url", "storage_key", "created_at"}
	evaluationColumnsWithDefault    = []string{"current_status", "updated_at"}
	evaluationPrimaryKeyColumns     = []string{"id"}
	evaluationGeneratedColumns      = []string{}
)

type (
	// EvaluationSlice is an alias for a slice of pointers to Evaluation.
	// This should almost always be used instead of []Evaluation.
	EvaluationSlice []*Evaluation
	// EvaluationHook is the signature for custom Evaluation hook methods
	EvaluationHook func(context.Context, boil.ContextExecutor, *Evaluation) error

	evaluationQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	evaluationType                 = reflect.TypeOf(&Evaluation{})
	evaluationMapping              = queries.MakeStructMapping(evaluationType)
	evaluationPrimaryKeyMapping, _ = queries.BindMapping(evaluationType, evaluationMapping, evaluationPrimaryKeyColumns)
	evaluationInsertCacheMut       sync.RWMutex
	evaluationInsertCache          = make(map[string]insertCache)
	evaluationUpdateCacheMut       sync.RWMutex
	evaluationUpdateCache          = make(map[string]updateCache)
	evaluationUpsertCacheMut       sync.RWMutex
	evaluationUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var evaluationAfterSelectMu sync.Mutex
var evaluationAfterSelectHooks []EvaluationHook

var evaluationBeforeInsertMu sync.Mutex
var evaluationBeforeInsertHooks []EvaluationHook
var evaluationAfterInsertMu sync.Mutex
var evaluationAfterInsertHooks []EvaluationHook

var evaluationBeforeUpdateMu sync.Mutex
var evaluationBeforeUpdateHooks []EvaluationHook
var evaluationAfterUpdateMu sync.Mutex
var evaluationAfterUpdateHooks []EvaluationHook

var evaluationBeforeDeleteMu sync.Mutex
var evaluationBeforeDeleteHooks []EvaluationHook
var evaluationAfterDeleteMu sync.Mutex
var evaluationAfterDeleteHooks []EvaluationHook

var evaluationBeforeUpsertMu sync.Mutex
var evaluationBeforeUpsertHooks []EvaluationHook
var evaluationAfterUpsertMu sync.Mutex
var evaluationAfterUpsertHooks []EvaluationHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Evaluation) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range evaluationAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Evaluation) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range evaluationBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Evaluation) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range evaluationAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Evaluation) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range evaluationBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Evaluation) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range evaluationAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Evaluation) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range evaluationBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Evaluation) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range evaluationAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Evaluation) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range evaluationBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Evaluation) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range evaluationAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddEvaluationHook registers your hook function for all future operations.
func AddEvaluationHook(hookPoint boil.HookPoint, evaluationHook EvaluationHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		evaluationAfterSelectMu.Lock()
		evaluationAfterSelectHooks = append(evaluationAfterSelectHooks, evaluationHook)
		evaluationAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		evaluationBeforeInsertMu.Lock()
		evaluationBeforeInsertHooks = append(evaluationBeforeInsertHooks, evaluationHook)
		evaluationBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		evaluationAfterInsertMu.Lock()
		evaluationAfterInsertHooks = append(evaluationAfterInsertHooks, evaluationHook)
		evaluationAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		evaluationBeforeUpdateMu.Lock()
		evaluationBeforeUpdateHooks = append(evaluationBeforeUpdateHooks, evaluationHook)
		evaluationBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		evaluationAfterUpdateMu.Lock()
		evaluationAfterUpdateHooks = append(evaluationAfterUpdateHooks, evaluationHook)
		evaluationAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		evaluationBeforeDeleteMu.Lock()
		evaluationBeforeDeleteHooks = append(evaluationBeforeDeleteHooks, evaluationHook)
		evaluationBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		evaluationAfterDeleteMu.Lock()
		evaluationAfterDeleteHooks = append(evaluationAfterDeleteHooks, evaluationHook)
		evaluationAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		evaluationBeforeUpsertMu.Lock()
		evaluationBeforeUpsertHooks = append(evaluationBeforeUpsertHooks, evaluationHook)
		evaluationBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		evaluationAfterUpsertMu.Lock()
		evaluationAfterUpsertHooks = append(evaluationAfterUpsertHooks, evaluationHook)
		evaluationAfterUpsertMu.Unlock()
	}
}

// One returns a single evaluation record from the query.
func (q evaluationQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Evaluation, error) {
	o := &Evaluation{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbmodels: failed to execute a one query for evaluations")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Evaluation records from the query.
func (q evaluationQuery) All(ctx context.Context, exec boil.ContextExecutor) (EvaluationSlice, error) {
	var o []*Evaluation

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "dbmodels: failed to assign all query results to Evaluation slice")
	}

	if len(evaluationAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Evaluation records in the query.
func (q evaluationQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to count evaluations rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q evaluationQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "dbmodels: failed to check if evaluations exists")
	}

	return count > 0, nil
}

// Specialist pointed to by the foreign key.
func (o *Evaluation) Specialist(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.SpecialistID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// ExecutiveFunctionsSubtests retrieves all the executive_functions_subtest's ExecutiveFunctionsSubtests with an executor.
func (o *Evaluation) ExecutiveFunctionsSubtests(mods ...qm.QueryMod) executiveFunctionsSubtestQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`executive_functions_subtests`.`evaluation_id`=?", o.ID),
	)

	return ExecutiveFunctionsSubtests(queryMods...)
}

// LanguageFluencies retrieves all the language_fluency's LanguageFluencies with an executor.
func (o *Evaluation) LanguageFluencies(mods ...qm.QueryMod) languageFluencyQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`language_fluencies`.`evaluation_id`=?", o.ID),
	)

	return LanguageFluencies(queryMods...)
}

// LettersCancellationSubtests retrieves all the letters_cancellation_subtest's LettersCancellationSubtests with an executor.
func (o *Evaluation) LettersCancellationSubtests(mods ...qm.QueryMod) lettersCancellationSubtestQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`letters_cancellation_subtests`.`evaluation_id`=?", o.ID),
	)

	return LettersCancellationSubtests(queryMods...)
}

// VerbalMemorySubtests retrieves all the verbal_memory_subtest's VerbalMemorySubtests with an executor.
func (o *Evaluation) VerbalMemorySubtests(mods ...qm.QueryMod) verbalMemorySubtestQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`verbal_memory_subtests`.`evaluation_id`=?", o.ID),
	)

	return VerbalMemorySubtests(queryMods...)
}

// VisualMemorySubtests retrieves all the visual_memory_subtest's VisualMemorySubtests with an executor.
func (o *Evaluation) VisualMemorySubtests(mods ...qm.QueryMod) visualMemorySubtestQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`visual_memory_subtest`.`evaluation_id`=?", o.ID),
	)

	return VisualMemorySubtests(queryMods...)
}

// LoadSpecialist allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (evaluationL) LoadSpecialist(ctx context.Context, e boil.ContextExecutor, singular bool, maybeEvaluation interface{}, mods queries.Applicator) error {
	var slice []*Evaluation
	var object *Evaluation

	if singular {
		var ok bool
		object, ok = maybeEvaluation.(*Evaluation)
		if !ok {
			object = new(Evaluation)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeEvaluation)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeEvaluation))
			}
		}
	} else {
		s, ok := maybeEvaluation.(*[]*Evaluation)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeEvaluation)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeEvaluation))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &evaluationR{}
		}
		args[object.SpecialistID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &evaluationR{}
			}

			args[obj.SpecialistID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Specialist = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.SpecialistEvaluations = append(foreign.R.SpecialistEvaluations, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.SpecialistID == foreign.ID {
				local.R.Specialist = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.SpecialistEvaluations = append(foreign.R.SpecialistEvaluations, local)
				break
			}
		}
	}

	return nil
}

// LoadExecutiveFunctionsSubtests allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (evaluationL) LoadExecutiveFunctionsSubtests(ctx context.Context, e boil.ContextExecutor, singular bool, maybeEvaluation interface{}, mods queries.Applicator) error {
	var slice []*Evaluation
	var object *Evaluation

	if singular {
		var ok bool
		object, ok = maybeEvaluation.(*Evaluation)
		if !ok {
			object = new(Evaluation)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeEvaluation)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeEvaluation))
			}
		}
	} else {
		s, ok := maybeEvaluation.(*[]*Evaluation)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeEvaluation)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeEvaluation))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &evaluationR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &evaluationR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`executive_functions_subtests`),
		qm.WhereIn(`executive_functions_subtests.evaluation_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load executive_functions_subtests")
	}

	var resultSlice []*ExecutiveFunctionsSubtest
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice executive_functions_subtests")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on executive_functions_subtests")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for executive_functions_subtests")
	}

	if len(executiveFunctionsSubtestAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ExecutiveFunctionsSubtests = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &executiveFunctionsSubtestR{}
			}
			foreign.R.Evaluation = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.EvaluationID {
				local.R.ExecutiveFunctionsSubtests = append(local.R.ExecutiveFunctionsSubtests, foreign)
				if foreign.R == nil {
					foreign.R = &executiveFunctionsSubtestR{}
				}
				foreign.R.Evaluation = local
				break
			}
		}
	}

	return nil
}

// LoadLanguageFluencies allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (evaluationL) LoadLanguageFluencies(ctx context.Context, e boil.ContextExecutor, singular bool, maybeEvaluation interface{}, mods queries.Applicator) error {
	var slice []*Evaluation
	var object *Evaluation

	if singular {
		var ok bool
		object, ok = maybeEvaluation.(*Evaluation)
		if !ok {
			object = new(Evaluation)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeEvaluation)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeEvaluation))
			}
		}
	} else {
		s, ok := maybeEvaluation.(*[]*Evaluation)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeEvaluation)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeEvaluation))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &evaluationR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &evaluationR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`language_fluencies`),
		qm.WhereIn(`language_fluencies.evaluation_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load language_fluencies")
	}

	var resultSlice []*LanguageFluency
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice language_fluencies")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on language_fluencies")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for language_fluencies")
	}

	if len(languageFluencyAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.LanguageFluencies = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &languageFluencyR{}
			}
			foreign.R.Evaluation = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.EvaluationID {
				local.R.LanguageFluencies = append(local.R.LanguageFluencies, foreign)
				if foreign.R == nil {
					foreign.R = &languageFluencyR{}
				}
				foreign.R.Evaluation = local
				break
			}
		}
	}

	return nil
}

// LoadLettersCancellationSubtests allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (evaluationL) LoadLettersCancellationSubtests(ctx context.Context, e boil.ContextExecutor, singular bool, maybeEvaluation interface{}, mods queries.Applicator) error {
	var slice []*Evaluation
	var object *Evaluation

	if singular {
		var ok bool
		object, ok = maybeEvaluation.(*Evaluation)
		if !ok {
			object = new(Evaluation)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeEvaluation)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeEvaluation))
			}
		}
	} else {
		s, ok := maybeEvaluation.(*[]*Evaluation)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeEvaluation)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeEvaluation))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &evaluationR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &evaluationR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`letters_cancellation_subtests`),
		qm.WhereIn(`letters_cancellation_subtests.evaluation_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load letters_cancellation_subtests")
	}

	var resultSlice []*LettersCancellationSubtest
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice letters_cancellation_subtests")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on letters_cancellation_subtests")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for letters_cancellation_subtests")
	}

	if len(lettersCancellationSubtestAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.LettersCancellationSubtests = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &lettersCancellationSubtestR{}
			}
			foreign.R.Evaluation = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.EvaluationID {
				local.R.LettersCancellationSubtests = append(local.R.LettersCancellationSubtests, foreign)
				if foreign.R == nil {
					foreign.R = &lettersCancellationSubtestR{}
				}
				foreign.R.Evaluation = local
				break
			}
		}
	}

	return nil
}

// LoadVerbalMemorySubtests allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (evaluationL) LoadVerbalMemorySubtests(ctx context.Context, e boil.ContextExecutor, singular bool, maybeEvaluation interface{}, mods queries.Applicator) error {
	var slice []*Evaluation
	var object *Evaluation

	if singular {
		var ok bool
		object, ok = maybeEvaluation.(*Evaluation)
		if !ok {
			object = new(Evaluation)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeEvaluation)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeEvaluation))
			}
		}
	} else {
		s, ok := maybeEvaluation.(*[]*Evaluation)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeEvaluation)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeEvaluation))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &evaluationR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &evaluationR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`verbal_memory_subtests`),
		qm.WhereIn(`verbal_memory_subtests.evaluation_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load verbal_memory_subtests")
	}

	var resultSlice []*VerbalMemorySubtest
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice verbal_memory_subtests")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on verbal_memory_subtests")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for verbal_memory_subtests")
	}

	if len(verbalMemorySubtestAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.VerbalMemorySubtests = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &verbalMemorySubtestR{}
			}
			foreign.R.Evaluation = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.EvaluationID {
				local.R.VerbalMemorySubtests = append(local.R.VerbalMemorySubtests, foreign)
				if foreign.R == nil {
					foreign.R = &verbalMemorySubtestR{}
				}
				foreign.R.Evaluation = local
				break
			}
		}
	}

	return nil
}

// LoadVisualMemorySubtests allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (evaluationL) LoadVisualMemorySubtests(ctx context.Context, e boil.ContextExecutor, singular bool, maybeEvaluation interface{}, mods queries.Applicator) error {
	var slice []*Evaluation
	var object *Evaluation

	if singular {
		var ok bool
		object, ok = maybeEvaluation.(*Evaluation)
		if !ok {
			object = new(Evaluation)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeEvaluation)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeEvaluation))
			}
		}
	} else {
		s, ok := maybeEvaluation.(*[]*Evaluation)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeEvaluation)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeEvaluation))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &evaluationR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &evaluationR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`visual_memory_subtest`),
		qm.WhereIn(`visual_memory_subtest.evaluation_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load visual_memory_subtest")
	}

	var resultSlice []*VisualMemorySubtest
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice visual_memory_subtest")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on visual_memory_subtest")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for visual_memory_subtest")
	}

	if len(visualMemorySubtestAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.VisualMemorySubtests = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &visualMemorySubtestR{}
			}
			foreign.R.Evaluation = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.EvaluationID {
				local.R.VisualMemorySubtests = append(local.R.VisualMemorySubtests, foreign)
				if foreign.R == nil {
					foreign.R = &visualMemorySubtestR{}
				}
				foreign.R.Evaluation = local
				break
			}
		}
	}

	return nil
}

// SetSpecialist of the evaluation to the related item.
// Sets o.R.Specialist to related.
// Adds o to related.R.SpecialistEvaluations.
func (o *Evaluation) SetSpecialist(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `evaluations` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"specialist_id"}),
		strmangle.WhereClause("`", "`", 0, evaluationPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.SpecialistID = related.ID
	if o.R == nil {
		o.R = &evaluationR{
			Specialist: related,
		}
	} else {
		o.R.Specialist = related
	}

	if related.R == nil {
		related.R = &userR{
			SpecialistEvaluations: EvaluationSlice{o},
		}
	} else {
		related.R.SpecialistEvaluations = append(related.R.SpecialistEvaluations, o)
	}

	return nil
}

// AddExecutiveFunctionsSubtests adds the given related objects to the existing relationships
// of the evaluation, optionally inserting them as new records.
// Appends related to o.R.ExecutiveFunctionsSubtests.
// Sets related.R.Evaluation appropriately.
func (o *Evaluation) AddExecutiveFunctionsSubtests(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ExecutiveFunctionsSubtest) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.EvaluationID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `executive_functions_subtests` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"evaluation_id"}),
				strmangle.WhereClause("`", "`", 0, executiveFunctionsSubtestPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.EvaluationID = o.ID
		}
	}

	if o.R == nil {
		o.R = &evaluationR{
			ExecutiveFunctionsSubtests: related,
		}
	} else {
		o.R.ExecutiveFunctionsSubtests = append(o.R.ExecutiveFunctionsSubtests, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &executiveFunctionsSubtestR{
				Evaluation: o,
			}
		} else {
			rel.R.Evaluation = o
		}
	}
	return nil
}

// AddLanguageFluencies adds the given related objects to the existing relationships
// of the evaluation, optionally inserting them as new records.
// Appends related to o.R.LanguageFluencies.
// Sets related.R.Evaluation appropriately.
func (o *Evaluation) AddLanguageFluencies(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*LanguageFluency) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.EvaluationID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `language_fluencies` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"evaluation_id"}),
				strmangle.WhereClause("`", "`", 0, languageFluencyPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.EvaluationID = o.ID
		}
	}

	if o.R == nil {
		o.R = &evaluationR{
			LanguageFluencies: related,
		}
	} else {
		o.R.LanguageFluencies = append(o.R.LanguageFluencies, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &languageFluencyR{
				Evaluation: o,
			}
		} else {
			rel.R.Evaluation = o
		}
	}
	return nil
}

// AddLettersCancellationSubtests adds the given related objects to the existing relationships
// of the evaluation, optionally inserting them as new records.
// Appends related to o.R.LettersCancellationSubtests.
// Sets related.R.Evaluation appropriately.
func (o *Evaluation) AddLettersCancellationSubtests(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*LettersCancellationSubtest) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.EvaluationID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `letters_cancellation_subtests` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"evaluation_id"}),
				strmangle.WhereClause("`", "`", 0, lettersCancellationSubtestPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.EvaluationID = o.ID
		}
	}

	if o.R == nil {
		o.R = &evaluationR{
			LettersCancellationSubtests: related,
		}
	} else {
		o.R.LettersCancellationSubtests = append(o.R.LettersCancellationSubtests, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &lettersCancellationSubtestR{
				Evaluation: o,
			}
		} else {
			rel.R.Evaluation = o
		}
	}
	return nil
}

// AddVerbalMemorySubtests adds the given related objects to the existing relationships
// of the evaluation, optionally inserting them as new records.
// Appends related to o.R.VerbalMemorySubtests.
// Sets related.R.Evaluation appropriately.
func (o *Evaluation) AddVerbalMemorySubtests(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*VerbalMemorySubtest) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.EvaluationID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `verbal_memory_subtests` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"evaluation_id"}),
				strmangle.WhereClause("`", "`", 0, verbalMemorySubtestPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.EvaluationID = o.ID
		}
	}

	if o.R == nil {
		o.R = &evaluationR{
			VerbalMemorySubtests: related,
		}
	} else {
		o.R.VerbalMemorySubtests = append(o.R.VerbalMemorySubtests, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &verbalMemorySubtestR{
				Evaluation: o,
			}
		} else {
			rel.R.Evaluation = o
		}
	}
	return nil
}

// AddVisualMemorySubtests adds the given related objects to the existing relationships
// of the evaluation, optionally inserting them as new records.
// Appends related to o.R.VisualMemorySubtests.
// Sets related.R.Evaluation appropriately.
func (o *Evaluation) AddVisualMemorySubtests(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*VisualMemorySubtest) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.EvaluationID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `visual_memory_subtest` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"evaluation_id"}),
				strmangle.WhereClause("`", "`", 0, visualMemorySubtestPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.EvaluationID = o.ID
		}
	}

	if o.R == nil {
		o.R = &evaluationR{
			VisualMemorySubtests: related,
		}
	} else {
		o.R.VisualMemorySubtests = append(o.R.VisualMemorySubtests, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &visualMemorySubtestR{
				Evaluation: o,
			}
		} else {
			rel.R.Evaluation = o
		}
	}
	return nil
}

// Evaluations retrieves all the records using an executor.
func Evaluations(mods ...qm.QueryMod) evaluationQuery {
	mods = append(mods, qm.From("`evaluations`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`evaluations`.*"})
	}

	return evaluationQuery{q}
}

// FindEvaluation retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindEvaluation(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*Evaluation, error) {
	evaluationObj := &Evaluation{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `evaluations` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, evaluationObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbmodels: unable to select from evaluations")
	}

	if err = evaluationObj.doAfterSelectHooks(ctx, exec); err != nil {
		return evaluationObj, err
	}

	return evaluationObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Evaluation) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("dbmodels: no evaluations provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(evaluationColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	evaluationInsertCacheMut.RLock()
	cache, cached := evaluationInsertCache[key]
	evaluationInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			evaluationAllColumns,
			evaluationColumnsWithDefault,
			evaluationColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(evaluationType, evaluationMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(evaluationType, evaluationMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `evaluations` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `evaluations` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `evaluations` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, evaluationPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to insert into evaluations")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to populate default values for evaluations")
	}

CacheNoHooks:
	if !cached {
		evaluationInsertCacheMut.Lock()
		evaluationInsertCache[key] = cache
		evaluationInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Evaluation.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Evaluation) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	evaluationUpdateCacheMut.RLock()
	cache, cached := evaluationUpdateCache[key]
	evaluationUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			evaluationAllColumns,
			evaluationPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("dbmodels: unable to update evaluations, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `evaluations` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, evaluationPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(evaluationType, evaluationMapping, append(wl, evaluationPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to update evaluations row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by update for evaluations")
	}

	if !cached {
		evaluationUpdateCacheMut.Lock()
		evaluationUpdateCache[key] = cache
		evaluationUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q evaluationQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to update all for evaluations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to retrieve rows affected for evaluations")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o EvaluationSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("dbmodels: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), evaluationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `evaluations` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, evaluationPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to update all in evaluation slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to retrieve rows affected all in update all evaluation")
	}
	return rowsAff, nil
}

var mySQLEvaluationUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Evaluation) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("dbmodels: no evaluations provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(evaluationColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLEvaluationUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	evaluationUpsertCacheMut.RLock()
	cache, cached := evaluationUpsertCache[key]
	evaluationUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			evaluationAllColumns,
			evaluationColumnsWithDefault,
			evaluationColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			evaluationAllColumns,
			evaluationPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("dbmodels: unable to upsert evaluations, could not build update column list")
		}

		ret := strmangle.SetComplement(evaluationAllColumns, strmangle.SetIntersect(insert, update))

		cache.query = buildUpsertQueryMySQL(dialect, "`evaluations`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `evaluations` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(evaluationType, evaluationMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(evaluationType, evaluationMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to upsert for evaluations")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(evaluationType, evaluationMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to retrieve unique values for evaluations")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to populate default values for evaluations")
	}

CacheNoHooks:
	if !cached {
		evaluationUpsertCacheMut.Lock()
		evaluationUpsertCache[key] = cache
		evaluationUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Evaluation record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Evaluation) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("dbmodels: no Evaluation provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), evaluationPrimaryKeyMapping)
	sql := "DELETE FROM `evaluations` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to delete from evaluations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by delete for evaluations")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q evaluationQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("dbmodels: no evaluationQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to delete all from evaluations")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by deleteall for evaluations")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o EvaluationSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(evaluationBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), evaluationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `evaluations` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, evaluationPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to delete all from evaluation slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by deleteall for evaluations")
	}

	if len(evaluationAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Evaluation) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindEvaluation(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *EvaluationSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := EvaluationSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), evaluationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `evaluations`.* FROM `evaluations` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, evaluationPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to reload all in EvaluationSlice")
	}

	*o = slice

	return nil
}

// EvaluationExists checks if the Evaluation row exists.
func EvaluationExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `evaluations` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "dbmodels: unable to check if evaluations exists")
	}

	return exists, nil
}

// Exists checks if the Evaluation row exists.
func (o *Evaluation) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return EvaluationExists(ctx, exec, o.ID)
}
