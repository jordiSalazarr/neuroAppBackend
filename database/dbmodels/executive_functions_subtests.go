// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dbmodels

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/aarondl/null/v8"
	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/sqlboiler/v4/queries/qm"
	"github.com/aarondl/sqlboiler/v4/queries/qmhelper"
	"github.com/aarondl/strmangle"
	"github.com/friendsofgo/errors"
)

// ExecutiveFunctionsSubtest is an object representing the database table.
type ExecutiveFunctionsSubtest struct {
	ID                string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	EvaluationID      string      `boil:"evaluation_id" json:"evaluation_id" toml:"evaluation_id" yaml:"evaluation_id"`
	NumberOfItems     int         `boil:"number_of_items" json:"number_of_items" toml:"number_of_items" yaml:"number_of_items"`
	TotalClicks       int         `boil:"total_clicks" json:"total_clicks" toml:"total_clicks" yaml:"total_clicks"`
	TotalErrors       int         `boil:"total_errors" json:"total_errors" toml:"total_errors" yaml:"total_errors"`
	TotalCorrect      int         `boil:"total_correct" json:"total_correct" toml:"total_correct" yaml:"total_correct"`
	TotalTimeSec      float64     `boil:"total_time_sec" json:"total_time_sec" toml:"total_time_sec" yaml:"total_time_sec"`
	Type              string      `boil:"type" json:"type" toml:"type" yaml:"type"`
	Score             int         `boil:"score" json:"score" toml:"score" yaml:"score"`
	Accuracy          float64     `boil:"accuracy" json:"accuracy" toml:"accuracy" yaml:"accuracy"`
	SpeedIndex        float64     `boil:"speed_index" json:"speed_index" toml:"speed_index" yaml:"speed_index"`
	CommissionRate    float64     `boil:"commission_rate" json:"commission_rate" toml:"commission_rate" yaml:"commission_rate"`
	DurationSec       float64     `boil:"duration_sec" json:"duration_sec" toml:"duration_sec" yaml:"duration_sec"`
	AssistantAnalysis null.String `boil:"assistant_analysis" json:"assistant_analysis,omitempty" toml:"assistant_analysis" yaml:"assistant_analysis,omitempty"`
	CreatedAt         time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *executiveFunctionsSubtestR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L executiveFunctionsSubtestL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ExecutiveFunctionsSubtestColumns = struct {
	ID                string
	EvaluationID      string
	NumberOfItems     string
	TotalClicks       string
	TotalErrors       string
	TotalCorrect      string
	TotalTimeSec      string
	Type              string
	Score             string
	Accuracy          string
	SpeedIndex        string
	CommissionRate    string
	DurationSec       string
	AssistantAnalysis string
	CreatedAt         string
}{
	ID:                "id",
	EvaluationID:      "evaluation_id",
	NumberOfItems:     "number_of_items",
	TotalClicks:       "total_clicks",
	TotalErrors:       "total_errors",
	TotalCorrect:      "total_correct",
	TotalTimeSec:      "total_time_sec",
	Type:              "type",
	Score:             "score",
	Accuracy:          "accuracy",
	SpeedIndex:        "speed_index",
	CommissionRate:    "commission_rate",
	DurationSec:       "duration_sec",
	AssistantAnalysis: "assistant_analysis",
	CreatedAt:         "created_at",
}

var ExecutiveFunctionsSubtestTableColumns = struct {
	ID                string
	EvaluationID      string
	NumberOfItems     string
	TotalClicks       string
	TotalErrors       string
	TotalCorrect      string
	TotalTimeSec      string
	Type              string
	Score             string
	Accuracy          string
	SpeedIndex        string
	CommissionRate    string
	DurationSec       string
	AssistantAnalysis string
	CreatedAt         string
}{
	ID:                "executive_functions_subtests.id",
	EvaluationID:      "executive_functions_subtests.evaluation_id",
	NumberOfItems:     "executive_functions_subtests.number_of_items",
	TotalClicks:       "executive_functions_subtests.total_clicks",
	TotalErrors:       "executive_functions_subtests.total_errors",
	TotalCorrect:      "executive_functions_subtests.total_correct",
	TotalTimeSec:      "executive_functions_subtests.total_time_sec",
	Type:              "executive_functions_subtests.type",
	Score:             "executive_functions_subtests.score",
	Accuracy:          "executive_functions_subtests.accuracy",
	SpeedIndex:        "executive_functions_subtests.speed_index",
	CommissionRate:    "executive_functions_subtests.commission_rate",
	DurationSec:       "executive_functions_subtests.duration_sec",
	AssistantAnalysis: "executive_functions_subtests.assistant_analysis",
	CreatedAt:         "executive_functions_subtests.created_at",
}

// Generated where

var ExecutiveFunctionsSubtestWhere = struct {
	ID                whereHelperstring
	EvaluationID      whereHelperstring
	NumberOfItems     whereHelperint
	TotalClicks       whereHelperint
	TotalErrors       whereHelperint
	TotalCorrect      whereHelperint
	TotalTimeSec      whereHelperfloat64
	Type              whereHelperstring
	Score             whereHelperint
	Accuracy          whereHelperfloat64
	SpeedIndex        whereHelperfloat64
	CommissionRate    whereHelperfloat64
	DurationSec       whereHelperfloat64
	AssistantAnalysis whereHelpernull_String
	CreatedAt         whereHelpertime_Time
}{
	ID:                whereHelperstring{field: "`executive_functions_subtests`.`id`"},
	EvaluationID:      whereHelperstring{field: "`executive_functions_subtests`.`evaluation_id`"},
	NumberOfItems:     whereHelperint{field: "`executive_functions_subtests`.`number_of_items`"},
	TotalClicks:       whereHelperint{field: "`executive_functions_subtests`.`total_clicks`"},
	TotalErrors:       whereHelperint{field: "`executive_functions_subtests`.`total_errors`"},
	TotalCorrect:      whereHelperint{field: "`executive_functions_subtests`.`total_correct`"},
	TotalTimeSec:      whereHelperfloat64{field: "`executive_functions_subtests`.`total_time_sec`"},
	Type:              whereHelperstring{field: "`executive_functions_subtests`.`type`"},
	Score:             whereHelperint{field: "`executive_functions_subtests`.`score`"},
	Accuracy:          whereHelperfloat64{field: "`executive_functions_subtests`.`accuracy`"},
	SpeedIndex:        whereHelperfloat64{field: "`executive_functions_subtests`.`speed_index`"},
	CommissionRate:    whereHelperfloat64{field: "`executive_functions_subtests`.`commission_rate`"},
	DurationSec:       whereHelperfloat64{field: "`executive_functions_subtests`.`duration_sec`"},
	AssistantAnalysis: whereHelpernull_String{field: "`executive_functions_subtests`.`assistant_analysis`"},
	CreatedAt:         whereHelpertime_Time{field: "`executive_functions_subtests`.`created_at`"},
}

// ExecutiveFunctionsSubtestRels is where relationship names are stored.
var ExecutiveFunctionsSubtestRels = struct {
	Evaluation string
}{
	Evaluation: "Evaluation",
}

// executiveFunctionsSubtestR is where relationships are stored.
type executiveFunctionsSubtestR struct {
	Evaluation *Evaluation `boil:"Evaluation" json:"Evaluation" toml:"Evaluation" yaml:"Evaluation"`
}

// NewStruct creates a new relationship struct
func (*executiveFunctionsSubtestR) NewStruct() *executiveFunctionsSubtestR {
	return &executiveFunctionsSubtestR{}
}

func (o *ExecutiveFunctionsSubtest) GetEvaluation() *Evaluation {
	if o == nil {
		return nil
	}

	return o.R.GetEvaluation()
}

func (r *executiveFunctionsSubtestR) GetEvaluation() *Evaluation {
	if r == nil {
		return nil
	}

	return r.Evaluation
}

// executiveFunctionsSubtestL is where Load methods for each relationship are stored.
type executiveFunctionsSubtestL struct{}

var (
	executiveFunctionsSubtestAllColumns            = []string{"id", "evaluation_id", "number_of_items", "total_clicks", "total_errors", "total_correct", "total_time_sec", "type", "score", "accuracy", "speed_index", "commission_rate", "duration_sec", "assistant_analysis", "created_at"}
	executiveFunctionsSubtestColumnsWithoutDefault = []string{"id", "evaluation_id", "number_of_items", "total_clicks", "total_errors", "total_correct", "total_time_sec", "type", "score", "accuracy", "speed_index", "commission_rate", "duration_sec", "assistant_analysis"}
	executiveFunctionsSubtestColumnsWithDefault    = []string{"created_at"}
	executiveFunctionsSubtestPrimaryKeyColumns     = []string{"id"}
	executiveFunctionsSubtestGeneratedColumns      = []string{}
)

type (
	// ExecutiveFunctionsSubtestSlice is an alias for a slice of pointers to ExecutiveFunctionsSubtest.
	// This should almost always be used instead of []ExecutiveFunctionsSubtest.
	ExecutiveFunctionsSubtestSlice []*ExecutiveFunctionsSubtest
	// ExecutiveFunctionsSubtestHook is the signature for custom ExecutiveFunctionsSubtest hook methods
	ExecutiveFunctionsSubtestHook func(context.Context, boil.ContextExecutor, *ExecutiveFunctionsSubtest) error

	executiveFunctionsSubtestQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	executiveFunctionsSubtestType                 = reflect.TypeOf(&ExecutiveFunctionsSubtest{})
	executiveFunctionsSubtestMapping              = queries.MakeStructMapping(executiveFunctionsSubtestType)
	executiveFunctionsSubtestPrimaryKeyMapping, _ = queries.BindMapping(executiveFunctionsSubtestType, executiveFunctionsSubtestMapping, executiveFunctionsSubtestPrimaryKeyColumns)
	executiveFunctionsSubtestInsertCacheMut       sync.RWMutex
	executiveFunctionsSubtestInsertCache          = make(map[string]insertCache)
	executiveFunctionsSubtestUpdateCacheMut       sync.RWMutex
	executiveFunctionsSubtestUpdateCache          = make(map[string]updateCache)
	executiveFunctionsSubtestUpsertCacheMut       sync.RWMutex
	executiveFunctionsSubtestUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var executiveFunctionsSubtestAfterSelectMu sync.Mutex
var executiveFunctionsSubtestAfterSelectHooks []ExecutiveFunctionsSubtestHook

var executiveFunctionsSubtestBeforeInsertMu sync.Mutex
var executiveFunctionsSubtestBeforeInsertHooks []ExecutiveFunctionsSubtestHook
var executiveFunctionsSubtestAfterInsertMu sync.Mutex
var executiveFunctionsSubtestAfterInsertHooks []ExecutiveFunctionsSubtestHook

var executiveFunctionsSubtestBeforeUpdateMu sync.Mutex
var executiveFunctionsSubtestBeforeUpdateHooks []ExecutiveFunctionsSubtestHook
var executiveFunctionsSubtestAfterUpdateMu sync.Mutex
var executiveFunctionsSubtestAfterUpdateHooks []ExecutiveFunctionsSubtestHook

var executiveFunctionsSubtestBeforeDeleteMu sync.Mutex
var executiveFunctionsSubtestBeforeDeleteHooks []ExecutiveFunctionsSubtestHook
var executiveFunctionsSubtestAfterDeleteMu sync.Mutex
var executiveFunctionsSubtestAfterDeleteHooks []ExecutiveFunctionsSubtestHook

var executiveFunctionsSubtestBeforeUpsertMu sync.Mutex
var executiveFunctionsSubtestBeforeUpsertHooks []ExecutiveFunctionsSubtestHook
var executiveFunctionsSubtestAfterUpsertMu sync.Mutex
var executiveFunctionsSubtestAfterUpsertHooks []ExecutiveFunctionsSubtestHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ExecutiveFunctionsSubtest) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range executiveFunctionsSubtestAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ExecutiveFunctionsSubtest) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range executiveFunctionsSubtestBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ExecutiveFunctionsSubtest) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range executiveFunctionsSubtestAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ExecutiveFunctionsSubtest) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range executiveFunctionsSubtestBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ExecutiveFunctionsSubtest) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range executiveFunctionsSubtestAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ExecutiveFunctionsSubtest) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range executiveFunctionsSubtestBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ExecutiveFunctionsSubtest) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range executiveFunctionsSubtestAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ExecutiveFunctionsSubtest) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range executiveFunctionsSubtestBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ExecutiveFunctionsSubtest) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range executiveFunctionsSubtestAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddExecutiveFunctionsSubtestHook registers your hook function for all future operations.
func AddExecutiveFunctionsSubtestHook(hookPoint boil.HookPoint, executiveFunctionsSubtestHook ExecutiveFunctionsSubtestHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		executiveFunctionsSubtestAfterSelectMu.Lock()
		executiveFunctionsSubtestAfterSelectHooks = append(executiveFunctionsSubtestAfterSelectHooks, executiveFunctionsSubtestHook)
		executiveFunctionsSubtestAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		executiveFunctionsSubtestBeforeInsertMu.Lock()
		executiveFunctionsSubtestBeforeInsertHooks = append(executiveFunctionsSubtestBeforeInsertHooks, executiveFunctionsSubtestHook)
		executiveFunctionsSubtestBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		executiveFunctionsSubtestAfterInsertMu.Lock()
		executiveFunctionsSubtestAfterInsertHooks = append(executiveFunctionsSubtestAfterInsertHooks, executiveFunctionsSubtestHook)
		executiveFunctionsSubtestAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		executiveFunctionsSubtestBeforeUpdateMu.Lock()
		executiveFunctionsSubtestBeforeUpdateHooks = append(executiveFunctionsSubtestBeforeUpdateHooks, executiveFunctionsSubtestHook)
		executiveFunctionsSubtestBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		executiveFunctionsSubtestAfterUpdateMu.Lock()
		executiveFunctionsSubtestAfterUpdateHooks = append(executiveFunctionsSubtestAfterUpdateHooks, executiveFunctionsSubtestHook)
		executiveFunctionsSubtestAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		executiveFunctionsSubtestBeforeDeleteMu.Lock()
		executiveFunctionsSubtestBeforeDeleteHooks = append(executiveFunctionsSubtestBeforeDeleteHooks, executiveFunctionsSubtestHook)
		executiveFunctionsSubtestBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		executiveFunctionsSubtestAfterDeleteMu.Lock()
		executiveFunctionsSubtestAfterDeleteHooks = append(executiveFunctionsSubtestAfterDeleteHooks, executiveFunctionsSubtestHook)
		executiveFunctionsSubtestAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		executiveFunctionsSubtestBeforeUpsertMu.Lock()
		executiveFunctionsSubtestBeforeUpsertHooks = append(executiveFunctionsSubtestBeforeUpsertHooks, executiveFunctionsSubtestHook)
		executiveFunctionsSubtestBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		executiveFunctionsSubtestAfterUpsertMu.Lock()
		executiveFunctionsSubtestAfterUpsertHooks = append(executiveFunctionsSubtestAfterUpsertHooks, executiveFunctionsSubtestHook)
		executiveFunctionsSubtestAfterUpsertMu.Unlock()
	}
}

// One returns a single executiveFunctionsSubtest record from the query.
func (q executiveFunctionsSubtestQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ExecutiveFunctionsSubtest, error) {
	o := &ExecutiveFunctionsSubtest{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbmodels: failed to execute a one query for executive_functions_subtests")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ExecutiveFunctionsSubtest records from the query.
func (q executiveFunctionsSubtestQuery) All(ctx context.Context, exec boil.ContextExecutor) (ExecutiveFunctionsSubtestSlice, error) {
	var o []*ExecutiveFunctionsSubtest

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "dbmodels: failed to assign all query results to ExecutiveFunctionsSubtest slice")
	}

	if len(executiveFunctionsSubtestAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ExecutiveFunctionsSubtest records in the query.
func (q executiveFunctionsSubtestQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to count executive_functions_subtests rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q executiveFunctionsSubtestQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "dbmodels: failed to check if executive_functions_subtests exists")
	}

	return count > 0, nil
}

// Evaluation pointed to by the foreign key.
func (o *ExecutiveFunctionsSubtest) Evaluation(mods ...qm.QueryMod) evaluationQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.EvaluationID),
	}

	queryMods = append(queryMods, mods...)

	return Evaluations(queryMods...)
}

// LoadEvaluation allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (executiveFunctionsSubtestL) LoadEvaluation(ctx context.Context, e boil.ContextExecutor, singular bool, maybeExecutiveFunctionsSubtest interface{}, mods queries.Applicator) error {
	var slice []*ExecutiveFunctionsSubtest
	var object *ExecutiveFunctionsSubtest

	if singular {
		var ok bool
		object, ok = maybeExecutiveFunctionsSubtest.(*ExecutiveFunctionsSubtest)
		if !ok {
			object = new(ExecutiveFunctionsSubtest)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeExecutiveFunctionsSubtest)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeExecutiveFunctionsSubtest))
			}
		}
	} else {
		s, ok := maybeExecutiveFunctionsSubtest.(*[]*ExecutiveFunctionsSubtest)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeExecutiveFunctionsSubtest)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeExecutiveFunctionsSubtest))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &executiveFunctionsSubtestR{}
		}
		args[object.EvaluationID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &executiveFunctionsSubtestR{}
			}

			args[obj.EvaluationID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`evaluations`),
		qm.WhereIn(`evaluations.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Evaluation")
	}

	var resultSlice []*Evaluation
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Evaluation")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for evaluations")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for evaluations")
	}

	if len(evaluationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Evaluation = foreign
		if foreign.R == nil {
			foreign.R = &evaluationR{}
		}
		foreign.R.ExecutiveFunctionsSubtests = append(foreign.R.ExecutiveFunctionsSubtests, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.EvaluationID == foreign.ID {
				local.R.Evaluation = foreign
				if foreign.R == nil {
					foreign.R = &evaluationR{}
				}
				foreign.R.ExecutiveFunctionsSubtests = append(foreign.R.ExecutiveFunctionsSubtests, local)
				break
			}
		}
	}

	return nil
}

// SetEvaluation of the executiveFunctionsSubtest to the related item.
// Sets o.R.Evaluation to related.
// Adds o to related.R.ExecutiveFunctionsSubtests.
func (o *ExecutiveFunctionsSubtest) SetEvaluation(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Evaluation) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `executive_functions_subtests` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"evaluation_id"}),
		strmangle.WhereClause("`", "`", 0, executiveFunctionsSubtestPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.EvaluationID = related.ID
	if o.R == nil {
		o.R = &executiveFunctionsSubtestR{
			Evaluation: related,
		}
	} else {
		o.R.Evaluation = related
	}

	if related.R == nil {
		related.R = &evaluationR{
			ExecutiveFunctionsSubtests: ExecutiveFunctionsSubtestSlice{o},
		}
	} else {
		related.R.ExecutiveFunctionsSubtests = append(related.R.ExecutiveFunctionsSubtests, o)
	}

	return nil
}

// ExecutiveFunctionsSubtests retrieves all the records using an executor.
func ExecutiveFunctionsSubtests(mods ...qm.QueryMod) executiveFunctionsSubtestQuery {
	mods = append(mods, qm.From("`executive_functions_subtests`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`executive_functions_subtests`.*"})
	}

	return executiveFunctionsSubtestQuery{q}
}

// FindExecutiveFunctionsSubtest retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindExecutiveFunctionsSubtest(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*ExecutiveFunctionsSubtest, error) {
	executiveFunctionsSubtestObj := &ExecutiveFunctionsSubtest{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `executive_functions_subtests` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, executiveFunctionsSubtestObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbmodels: unable to select from executive_functions_subtests")
	}

	if err = executiveFunctionsSubtestObj.doAfterSelectHooks(ctx, exec); err != nil {
		return executiveFunctionsSubtestObj, err
	}

	return executiveFunctionsSubtestObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ExecutiveFunctionsSubtest) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("dbmodels: no executive_functions_subtests provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(executiveFunctionsSubtestColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	executiveFunctionsSubtestInsertCacheMut.RLock()
	cache, cached := executiveFunctionsSubtestInsertCache[key]
	executiveFunctionsSubtestInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			executiveFunctionsSubtestAllColumns,
			executiveFunctionsSubtestColumnsWithDefault,
			executiveFunctionsSubtestColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(executiveFunctionsSubtestType, executiveFunctionsSubtestMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(executiveFunctionsSubtestType, executiveFunctionsSubtestMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `executive_functions_subtests` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `executive_functions_subtests` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `executive_functions_subtests` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, executiveFunctionsSubtestPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to insert into executive_functions_subtests")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to populate default values for executive_functions_subtests")
	}

CacheNoHooks:
	if !cached {
		executiveFunctionsSubtestInsertCacheMut.Lock()
		executiveFunctionsSubtestInsertCache[key] = cache
		executiveFunctionsSubtestInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the ExecutiveFunctionsSubtest.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ExecutiveFunctionsSubtest) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	executiveFunctionsSubtestUpdateCacheMut.RLock()
	cache, cached := executiveFunctionsSubtestUpdateCache[key]
	executiveFunctionsSubtestUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			executiveFunctionsSubtestAllColumns,
			executiveFunctionsSubtestPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("dbmodels: unable to update executive_functions_subtests, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `executive_functions_subtests` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, executiveFunctionsSubtestPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(executiveFunctionsSubtestType, executiveFunctionsSubtestMapping, append(wl, executiveFunctionsSubtestPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to update executive_functions_subtests row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by update for executive_functions_subtests")
	}

	if !cached {
		executiveFunctionsSubtestUpdateCacheMut.Lock()
		executiveFunctionsSubtestUpdateCache[key] = cache
		executiveFunctionsSubtestUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q executiveFunctionsSubtestQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to update all for executive_functions_subtests")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to retrieve rows affected for executive_functions_subtests")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ExecutiveFunctionsSubtestSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("dbmodels: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), executiveFunctionsSubtestPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `executive_functions_subtests` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, executiveFunctionsSubtestPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to update all in executiveFunctionsSubtest slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to retrieve rows affected all in update all executiveFunctionsSubtest")
	}
	return rowsAff, nil
}

var mySQLExecutiveFunctionsSubtestUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ExecutiveFunctionsSubtest) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("dbmodels: no executive_functions_subtests provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(executiveFunctionsSubtestColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLExecutiveFunctionsSubtestUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	executiveFunctionsSubtestUpsertCacheMut.RLock()
	cache, cached := executiveFunctionsSubtestUpsertCache[key]
	executiveFunctionsSubtestUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			executiveFunctionsSubtestAllColumns,
			executiveFunctionsSubtestColumnsWithDefault,
			executiveFunctionsSubtestColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			executiveFunctionsSubtestAllColumns,
			executiveFunctionsSubtestPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("dbmodels: unable to upsert executive_functions_subtests, could not build update column list")
		}

		ret := strmangle.SetComplement(executiveFunctionsSubtestAllColumns, strmangle.SetIntersect(insert, update))

		cache.query = buildUpsertQueryMySQL(dialect, "`executive_functions_subtests`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `executive_functions_subtests` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(executiveFunctionsSubtestType, executiveFunctionsSubtestMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(executiveFunctionsSubtestType, executiveFunctionsSubtestMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to upsert for executive_functions_subtests")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(executiveFunctionsSubtestType, executiveFunctionsSubtestMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to retrieve unique values for executive_functions_subtests")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to populate default values for executive_functions_subtests")
	}

CacheNoHooks:
	if !cached {
		executiveFunctionsSubtestUpsertCacheMut.Lock()
		executiveFunctionsSubtestUpsertCache[key] = cache
		executiveFunctionsSubtestUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single ExecutiveFunctionsSubtest record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ExecutiveFunctionsSubtest) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("dbmodels: no ExecutiveFunctionsSubtest provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), executiveFunctionsSubtestPrimaryKeyMapping)
	sql := "DELETE FROM `executive_functions_subtests` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to delete from executive_functions_subtests")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by delete for executive_functions_subtests")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q executiveFunctionsSubtestQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("dbmodels: no executiveFunctionsSubtestQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to delete all from executive_functions_subtests")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by deleteall for executive_functions_subtests")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ExecutiveFunctionsSubtestSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(executiveFunctionsSubtestBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), executiveFunctionsSubtestPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `executive_functions_subtests` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, executiveFunctionsSubtestPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to delete all from executiveFunctionsSubtest slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by deleteall for executive_functions_subtests")
	}

	if len(executiveFunctionsSubtestAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ExecutiveFunctionsSubtest) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindExecutiveFunctionsSubtest(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ExecutiveFunctionsSubtestSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ExecutiveFunctionsSubtestSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), executiveFunctionsSubtestPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `executive_functions_subtests`.* FROM `executive_functions_subtests` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, executiveFunctionsSubtestPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to reload all in ExecutiveFunctionsSubtestSlice")
	}

	*o = slice

	return nil
}

// ExecutiveFunctionsSubtestExists checks if the ExecutiveFunctionsSubtest row exists.
func ExecutiveFunctionsSubtestExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `executive_functions_subtests` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "dbmodels: unable to check if executive_functions_subtests exists")
	}

	return exists, nil
}

// Exists checks if the ExecutiveFunctionsSubtest row exists.
func (o *ExecutiveFunctionsSubtest) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ExecutiveFunctionsSubtestExists(ctx, exec, o.ID)
}
