// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dbmodels

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/sqlboiler/v4/queries/qm"
	"github.com/aarondl/sqlboiler/v4/queries/qmhelper"
	"github.com/aarondl/strmangle"
	"github.com/friendsofgo/errors"
)

// VisualSpatialSubtest is an object representing the database table.
type VisualSpatialSubtest struct {
	ID           string    `boil:"id" json:"id" toml:"id" yaml:"id"`
	EvaluationID string    `boil:"evaluation_id" json:"evaluation_id" toml:"evaluation_id" yaml:"evaluation_id"`
	Score        int8      `boil:"score" json:"score" toml:"score" yaml:"score"`
	Note         string    `boil:"note" json:"note" toml:"note" yaml:"note"`
	CreatedAt    time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt    time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *visualSpatialSubtestR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L visualSpatialSubtestL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var VisualSpatialSubtestColumns = struct {
	ID           string
	EvaluationID string
	Score        string
	Note         string
	CreatedAt    string
	UpdatedAt    string
}{
	ID:           "id",
	EvaluationID: "evaluation_id",
	Score:        "score",
	Note:         "note",
	CreatedAt:    "created_at",
	UpdatedAt:    "updated_at",
}

var VisualSpatialSubtestTableColumns = struct {
	ID           string
	EvaluationID string
	Score        string
	Note         string
	CreatedAt    string
	UpdatedAt    string
}{
	ID:           "visual_spatial_subtest.id",
	EvaluationID: "visual_spatial_subtest.evaluation_id",
	Score:        "visual_spatial_subtest.score",
	Note:         "visual_spatial_subtest.note",
	CreatedAt:    "visual_spatial_subtest.created_at",
	UpdatedAt:    "visual_spatial_subtest.updated_at",
}

// Generated where

type whereHelperint8 struct{ field string }

func (w whereHelperint8) EQ(x int8) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint8) NEQ(x int8) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint8) LT(x int8) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint8) LTE(x int8) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint8) GT(x int8) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint8) GTE(x int8) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint8) IN(slice []int8) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint8) NIN(slice []int8) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var VisualSpatialSubtestWhere = struct {
	ID           whereHelperstring
	EvaluationID whereHelperstring
	Score        whereHelperint8
	Note         whereHelperstring
	CreatedAt    whereHelpertime_Time
	UpdatedAt    whereHelpertime_Time
}{
	ID:           whereHelperstring{field: "`visual_spatial_subtest`.`id`"},
	EvaluationID: whereHelperstring{field: "`visual_spatial_subtest`.`evaluation_id`"},
	Score:        whereHelperint8{field: "`visual_spatial_subtest`.`score`"},
	Note:         whereHelperstring{field: "`visual_spatial_subtest`.`note`"},
	CreatedAt:    whereHelpertime_Time{field: "`visual_spatial_subtest`.`created_at`"},
	UpdatedAt:    whereHelpertime_Time{field: "`visual_spatial_subtest`.`updated_at`"},
}

// VisualSpatialSubtestRels is where relationship names are stored.
var VisualSpatialSubtestRels = struct {
}{}

// visualSpatialSubtestR is where relationships are stored.
type visualSpatialSubtestR struct {
}

// NewStruct creates a new relationship struct
func (*visualSpatialSubtestR) NewStruct() *visualSpatialSubtestR {
	return &visualSpatialSubtestR{}
}

// visualSpatialSubtestL is where Load methods for each relationship are stored.
type visualSpatialSubtestL struct{}

var (
	visualSpatialSubtestAllColumns            = []string{"id", "evaluation_id", "score", "note", "created_at", "updated_at"}
	visualSpatialSubtestColumnsWithoutDefault = []string{"id", "evaluation_id", "score", "note"}
	visualSpatialSubtestColumnsWithDefault    = []string{"created_at", "updated_at"}
	visualSpatialSubtestPrimaryKeyColumns     = []string{"id"}
	visualSpatialSubtestGeneratedColumns      = []string{}
)

type (
	// VisualSpatialSubtestSlice is an alias for a slice of pointers to VisualSpatialSubtest.
	// This should almost always be used instead of []VisualSpatialSubtest.
	VisualSpatialSubtestSlice []*VisualSpatialSubtest
	// VisualSpatialSubtestHook is the signature for custom VisualSpatialSubtest hook methods
	VisualSpatialSubtestHook func(context.Context, boil.ContextExecutor, *VisualSpatialSubtest) error

	visualSpatialSubtestQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	visualSpatialSubtestType                 = reflect.TypeOf(&VisualSpatialSubtest{})
	visualSpatialSubtestMapping              = queries.MakeStructMapping(visualSpatialSubtestType)
	visualSpatialSubtestPrimaryKeyMapping, _ = queries.BindMapping(visualSpatialSubtestType, visualSpatialSubtestMapping, visualSpatialSubtestPrimaryKeyColumns)
	visualSpatialSubtestInsertCacheMut       sync.RWMutex
	visualSpatialSubtestInsertCache          = make(map[string]insertCache)
	visualSpatialSubtestUpdateCacheMut       sync.RWMutex
	visualSpatialSubtestUpdateCache          = make(map[string]updateCache)
	visualSpatialSubtestUpsertCacheMut       sync.RWMutex
	visualSpatialSubtestUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var visualSpatialSubtestAfterSelectMu sync.Mutex
var visualSpatialSubtestAfterSelectHooks []VisualSpatialSubtestHook

var visualSpatialSubtestBeforeInsertMu sync.Mutex
var visualSpatialSubtestBeforeInsertHooks []VisualSpatialSubtestHook
var visualSpatialSubtestAfterInsertMu sync.Mutex
var visualSpatialSubtestAfterInsertHooks []VisualSpatialSubtestHook

var visualSpatialSubtestBeforeUpdateMu sync.Mutex
var visualSpatialSubtestBeforeUpdateHooks []VisualSpatialSubtestHook
var visualSpatialSubtestAfterUpdateMu sync.Mutex
var visualSpatialSubtestAfterUpdateHooks []VisualSpatialSubtestHook

var visualSpatialSubtestBeforeDeleteMu sync.Mutex
var visualSpatialSubtestBeforeDeleteHooks []VisualSpatialSubtestHook
var visualSpatialSubtestAfterDeleteMu sync.Mutex
var visualSpatialSubtestAfterDeleteHooks []VisualSpatialSubtestHook

var visualSpatialSubtestBeforeUpsertMu sync.Mutex
var visualSpatialSubtestBeforeUpsertHooks []VisualSpatialSubtestHook
var visualSpatialSubtestAfterUpsertMu sync.Mutex
var visualSpatialSubtestAfterUpsertHooks []VisualSpatialSubtestHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *VisualSpatialSubtest) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range visualSpatialSubtestAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *VisualSpatialSubtest) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range visualSpatialSubtestBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *VisualSpatialSubtest) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range visualSpatialSubtestAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *VisualSpatialSubtest) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range visualSpatialSubtestBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *VisualSpatialSubtest) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range visualSpatialSubtestAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *VisualSpatialSubtest) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range visualSpatialSubtestBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *VisualSpatialSubtest) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range visualSpatialSubtestAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *VisualSpatialSubtest) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range visualSpatialSubtestBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *VisualSpatialSubtest) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range visualSpatialSubtestAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddVisualSpatialSubtestHook registers your hook function for all future operations.
func AddVisualSpatialSubtestHook(hookPoint boil.HookPoint, visualSpatialSubtestHook VisualSpatialSubtestHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		visualSpatialSubtestAfterSelectMu.Lock()
		visualSpatialSubtestAfterSelectHooks = append(visualSpatialSubtestAfterSelectHooks, visualSpatialSubtestHook)
		visualSpatialSubtestAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		visualSpatialSubtestBeforeInsertMu.Lock()
		visualSpatialSubtestBeforeInsertHooks = append(visualSpatialSubtestBeforeInsertHooks, visualSpatialSubtestHook)
		visualSpatialSubtestBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		visualSpatialSubtestAfterInsertMu.Lock()
		visualSpatialSubtestAfterInsertHooks = append(visualSpatialSubtestAfterInsertHooks, visualSpatialSubtestHook)
		visualSpatialSubtestAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		visualSpatialSubtestBeforeUpdateMu.Lock()
		visualSpatialSubtestBeforeUpdateHooks = append(visualSpatialSubtestBeforeUpdateHooks, visualSpatialSubtestHook)
		visualSpatialSubtestBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		visualSpatialSubtestAfterUpdateMu.Lock()
		visualSpatialSubtestAfterUpdateHooks = append(visualSpatialSubtestAfterUpdateHooks, visualSpatialSubtestHook)
		visualSpatialSubtestAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		visualSpatialSubtestBeforeDeleteMu.Lock()
		visualSpatialSubtestBeforeDeleteHooks = append(visualSpatialSubtestBeforeDeleteHooks, visualSpatialSubtestHook)
		visualSpatialSubtestBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		visualSpatialSubtestAfterDeleteMu.Lock()
		visualSpatialSubtestAfterDeleteHooks = append(visualSpatialSubtestAfterDeleteHooks, visualSpatialSubtestHook)
		visualSpatialSubtestAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		visualSpatialSubtestBeforeUpsertMu.Lock()
		visualSpatialSubtestBeforeUpsertHooks = append(visualSpatialSubtestBeforeUpsertHooks, visualSpatialSubtestHook)
		visualSpatialSubtestBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		visualSpatialSubtestAfterUpsertMu.Lock()
		visualSpatialSubtestAfterUpsertHooks = append(visualSpatialSubtestAfterUpsertHooks, visualSpatialSubtestHook)
		visualSpatialSubtestAfterUpsertMu.Unlock()
	}
}

// One returns a single visualSpatialSubtest record from the query.
func (q visualSpatialSubtestQuery) One(ctx context.Context, exec boil.ContextExecutor) (*VisualSpatialSubtest, error) {
	o := &VisualSpatialSubtest{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbmodels: failed to execute a one query for visual_spatial_subtest")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all VisualSpatialSubtest records from the query.
func (q visualSpatialSubtestQuery) All(ctx context.Context, exec boil.ContextExecutor) (VisualSpatialSubtestSlice, error) {
	var o []*VisualSpatialSubtest

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "dbmodels: failed to assign all query results to VisualSpatialSubtest slice")
	}

	if len(visualSpatialSubtestAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all VisualSpatialSubtest records in the query.
func (q visualSpatialSubtestQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to count visual_spatial_subtest rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q visualSpatialSubtestQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "dbmodels: failed to check if visual_spatial_subtest exists")
	}

	return count > 0, nil
}

// VisualSpatialSubtests retrieves all the records using an executor.
func VisualSpatialSubtests(mods ...qm.QueryMod) visualSpatialSubtestQuery {
	mods = append(mods, qm.From("`visual_spatial_subtest`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`visual_spatial_subtest`.*"})
	}

	return visualSpatialSubtestQuery{q}
}

// FindVisualSpatialSubtest retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindVisualSpatialSubtest(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*VisualSpatialSubtest, error) {
	visualSpatialSubtestObj := &VisualSpatialSubtest{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `visual_spatial_subtest` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, visualSpatialSubtestObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbmodels: unable to select from visual_spatial_subtest")
	}

	if err = visualSpatialSubtestObj.doAfterSelectHooks(ctx, exec); err != nil {
		return visualSpatialSubtestObj, err
	}

	return visualSpatialSubtestObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *VisualSpatialSubtest) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("dbmodels: no visual_spatial_subtest provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(visualSpatialSubtestColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	visualSpatialSubtestInsertCacheMut.RLock()
	cache, cached := visualSpatialSubtestInsertCache[key]
	visualSpatialSubtestInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			visualSpatialSubtestAllColumns,
			visualSpatialSubtestColumnsWithDefault,
			visualSpatialSubtestColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(visualSpatialSubtestType, visualSpatialSubtestMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(visualSpatialSubtestType, visualSpatialSubtestMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `visual_spatial_subtest` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `visual_spatial_subtest` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `visual_spatial_subtest` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, visualSpatialSubtestPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to insert into visual_spatial_subtest")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to populate default values for visual_spatial_subtest")
	}

CacheNoHooks:
	if !cached {
		visualSpatialSubtestInsertCacheMut.Lock()
		visualSpatialSubtestInsertCache[key] = cache
		visualSpatialSubtestInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the VisualSpatialSubtest.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *VisualSpatialSubtest) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	visualSpatialSubtestUpdateCacheMut.RLock()
	cache, cached := visualSpatialSubtestUpdateCache[key]
	visualSpatialSubtestUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			visualSpatialSubtestAllColumns,
			visualSpatialSubtestPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("dbmodels: unable to update visual_spatial_subtest, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `visual_spatial_subtest` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, visualSpatialSubtestPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(visualSpatialSubtestType, visualSpatialSubtestMapping, append(wl, visualSpatialSubtestPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to update visual_spatial_subtest row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by update for visual_spatial_subtest")
	}

	if !cached {
		visualSpatialSubtestUpdateCacheMut.Lock()
		visualSpatialSubtestUpdateCache[key] = cache
		visualSpatialSubtestUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q visualSpatialSubtestQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to update all for visual_spatial_subtest")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to retrieve rows affected for visual_spatial_subtest")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o VisualSpatialSubtestSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("dbmodels: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), visualSpatialSubtestPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `visual_spatial_subtest` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, visualSpatialSubtestPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to update all in visualSpatialSubtest slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to retrieve rows affected all in update all visualSpatialSubtest")
	}
	return rowsAff, nil
}

var mySQLVisualSpatialSubtestUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *VisualSpatialSubtest) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("dbmodels: no visual_spatial_subtest provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(visualSpatialSubtestColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLVisualSpatialSubtestUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	visualSpatialSubtestUpsertCacheMut.RLock()
	cache, cached := visualSpatialSubtestUpsertCache[key]
	visualSpatialSubtestUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			visualSpatialSubtestAllColumns,
			visualSpatialSubtestColumnsWithDefault,
			visualSpatialSubtestColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			visualSpatialSubtestAllColumns,
			visualSpatialSubtestPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("dbmodels: unable to upsert visual_spatial_subtest, could not build update column list")
		}

		ret := strmangle.SetComplement(visualSpatialSubtestAllColumns, strmangle.SetIntersect(insert, update))

		cache.query = buildUpsertQueryMySQL(dialect, "`visual_spatial_subtest`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `visual_spatial_subtest` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(visualSpatialSubtestType, visualSpatialSubtestMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(visualSpatialSubtestType, visualSpatialSubtestMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to upsert for visual_spatial_subtest")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(visualSpatialSubtestType, visualSpatialSubtestMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to retrieve unique values for visual_spatial_subtest")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to populate default values for visual_spatial_subtest")
	}

CacheNoHooks:
	if !cached {
		visualSpatialSubtestUpsertCacheMut.Lock()
		visualSpatialSubtestUpsertCache[key] = cache
		visualSpatialSubtestUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single VisualSpatialSubtest record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *VisualSpatialSubtest) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("dbmodels: no VisualSpatialSubtest provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), visualSpatialSubtestPrimaryKeyMapping)
	sql := "DELETE FROM `visual_spatial_subtest` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to delete from visual_spatial_subtest")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by delete for visual_spatial_subtest")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q visualSpatialSubtestQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("dbmodels: no visualSpatialSubtestQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to delete all from visual_spatial_subtest")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by deleteall for visual_spatial_subtest")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o VisualSpatialSubtestSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(visualSpatialSubtestBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), visualSpatialSubtestPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `visual_spatial_subtest` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, visualSpatialSubtestPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to delete all from visualSpatialSubtest slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by deleteall for visual_spatial_subtest")
	}

	if len(visualSpatialSubtestAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *VisualSpatialSubtest) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindVisualSpatialSubtest(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *VisualSpatialSubtestSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := VisualSpatialSubtestSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), visualSpatialSubtestPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `visual_spatial_subtest`.* FROM `visual_spatial_subtest` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, visualSpatialSubtestPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to reload all in VisualSpatialSubtestSlice")
	}

	*o = slice

	return nil
}

// VisualSpatialSubtestExists checks if the VisualSpatialSubtest row exists.
func VisualSpatialSubtestExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `visual_spatial_subtest` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "dbmodels: unable to check if visual_spatial_subtest exists")
	}

	return exists, nil
}

// Exists checks if the VisualSpatialSubtest row exists.
func (o *VisualSpatialSubtest) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return VisualSpatialSubtestExists(ctx, exec, o.ID)
}
