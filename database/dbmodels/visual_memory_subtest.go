// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dbmodels

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/aarondl/null/v8"
	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/sqlboiler/v4/queries/qm"
	"github.com/aarondl/sqlboiler/v4/queries/qmhelper"
	"github.com/aarondl/strmangle"
	"github.com/friendsofgo/errors"
)

// VisualMemorySubtest is an object representing the database table.
type VisualMemorySubtest struct {
	ID           string       `boil:"id" json:"id" toml:"id" yaml:"id"`
	EvaluationID string       `boil:"evaluation_id" json:"evaluation_id" toml:"evaluation_id" yaml:"evaluation_id"`
	Shape        string       `boil:"shape" json:"shape" toml:"shape" yaml:"shape"`
	Pass         bool         `boil:"pass" json:"pass" toml:"pass" yaml:"pass"`
	Score        float64      `boil:"score" json:"score" toml:"score" yaml:"score"`
	Reasons      string       `boil:"reasons" json:"reasons" toml:"reasons" yaml:"reasons"`
	Iou          null.Float64 `boil:"iou" json:"iou,omitempty" toml:"iou" yaml:"iou,omitempty"`
	Circularity  null.Float64 `boil:"circularity" json:"circularity,omitempty" toml:"circularity" yaml:"circularity,omitempty"`
	AngleRmse    null.Float64 `boil:"angle_rmse" json:"angle_rmse,omitempty" toml:"angle_rmse" yaml:"angle_rmse,omitempty"`
	SideCV       null.Float64 `boil:"side_cv" json:"side_cv,omitempty" toml:"side_cv" yaml:"side_cv,omitempty"`
	CenterX      null.Int     `boil:"center_x" json:"center_x,omitempty" toml:"center_x" yaml:"center_x,omitempty"`
	CenterY      null.Int     `boil:"center_y" json:"center_y,omitempty" toml:"center_y" yaml:"center_y,omitempty"`
	BboxW        null.Int     `boil:"bbox_w" json:"bbox_w,omitempty" toml:"bbox_w" yaml:"bbox_w,omitempty"`
	BboxH        null.Int     `boil:"bbox_h" json:"bbox_h,omitempty" toml:"bbox_h" yaml:"bbox_h,omitempty"`
	CreatedAt    time.Time    `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt    time.Time    `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *visualMemorySubtestR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L visualMemorySubtestL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var VisualMemorySubtestColumns = struct {
	ID           string
	EvaluationID string
	Shape        string
	Pass         string
	Score        string
	Reasons      string
	Iou          string
	Circularity  string
	AngleRmse    string
	SideCV       string
	CenterX      string
	CenterY      string
	BboxW        string
	BboxH        string
	CreatedAt    string
	UpdatedAt    string
}{
	ID:           "id",
	EvaluationID: "evaluation_id",
	Shape:        "shape",
	Pass:         "pass",
	Score:        "score",
	Reasons:      "reasons",
	Iou:          "iou",
	Circularity:  "circularity",
	AngleRmse:    "angle_rmse",
	SideCV:       "side_cv",
	CenterX:      "center_x",
	CenterY:      "center_y",
	BboxW:        "bbox_w",
	BboxH:        "bbox_h",
	CreatedAt:    "created_at",
	UpdatedAt:    "updated_at",
}

var VisualMemorySubtestTableColumns = struct {
	ID           string
	EvaluationID string
	Shape        string
	Pass         string
	Score        string
	Reasons      string
	Iou          string
	Circularity  string
	AngleRmse    string
	SideCV       string
	CenterX      string
	CenterY      string
	BboxW        string
	BboxH        string
	CreatedAt    string
	UpdatedAt    string
}{
	ID:           "visual_memory_subtest.id",
	EvaluationID: "visual_memory_subtest.evaluation_id",
	Shape:        "visual_memory_subtest.shape",
	Pass:         "visual_memory_subtest.pass",
	Score:        "visual_memory_subtest.score",
	Reasons:      "visual_memory_subtest.reasons",
	Iou:          "visual_memory_subtest.iou",
	Circularity:  "visual_memory_subtest.circularity",
	AngleRmse:    "visual_memory_subtest.angle_rmse",
	SideCV:       "visual_memory_subtest.side_cv",
	CenterX:      "visual_memory_subtest.center_x",
	CenterY:      "visual_memory_subtest.center_y",
	BboxW:        "visual_memory_subtest.bbox_w",
	BboxH:        "visual_memory_subtest.bbox_h",
	CreatedAt:    "visual_memory_subtest.created_at",
	UpdatedAt:    "visual_memory_subtest.updated_at",
}

// Generated where

type whereHelpernull_Float64 struct{ field string }

func (w whereHelpernull_Float64) EQ(x null.Float64) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Float64) NEQ(x null.Float64) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Float64) LT(x null.Float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Float64) LTE(x null.Float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Float64) GT(x null.Float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Float64) GTE(x null.Float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_Float64) IN(slice []float64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_Float64) NIN(slice []float64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_Float64) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Float64) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelpernull_Int struct{ field string }

func (w whereHelpernull_Int) EQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int) NEQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int) LT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int) LTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int) GT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int) GTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_Int) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_Int) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_Int) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var VisualMemorySubtestWhere = struct {
	ID           whereHelperstring
	EvaluationID whereHelperstring
	Shape        whereHelperstring
	Pass         whereHelperbool
	Score        whereHelperfloat64
	Reasons      whereHelperstring
	Iou          whereHelpernull_Float64
	Circularity  whereHelpernull_Float64
	AngleRmse    whereHelpernull_Float64
	SideCV       whereHelpernull_Float64
	CenterX      whereHelpernull_Int
	CenterY      whereHelpernull_Int
	BboxW        whereHelpernull_Int
	BboxH        whereHelpernull_Int
	CreatedAt    whereHelpertime_Time
	UpdatedAt    whereHelpertime_Time
}{
	ID:           whereHelperstring{field: "`visual_memory_subtest`.`id`"},
	EvaluationID: whereHelperstring{field: "`visual_memory_subtest`.`evaluation_id`"},
	Shape:        whereHelperstring{field: "`visual_memory_subtest`.`shape`"},
	Pass:         whereHelperbool{field: "`visual_memory_subtest`.`pass`"},
	Score:        whereHelperfloat64{field: "`visual_memory_subtest`.`score`"},
	Reasons:      whereHelperstring{field: "`visual_memory_subtest`.`reasons`"},
	Iou:          whereHelpernull_Float64{field: "`visual_memory_subtest`.`iou`"},
	Circularity:  whereHelpernull_Float64{field: "`visual_memory_subtest`.`circularity`"},
	AngleRmse:    whereHelpernull_Float64{field: "`visual_memory_subtest`.`angle_rmse`"},
	SideCV:       whereHelpernull_Float64{field: "`visual_memory_subtest`.`side_cv`"},
	CenterX:      whereHelpernull_Int{field: "`visual_memory_subtest`.`center_x`"},
	CenterY:      whereHelpernull_Int{field: "`visual_memory_subtest`.`center_y`"},
	BboxW:        whereHelpernull_Int{field: "`visual_memory_subtest`.`bbox_w`"},
	BboxH:        whereHelpernull_Int{field: "`visual_memory_subtest`.`bbox_h`"},
	CreatedAt:    whereHelpertime_Time{field: "`visual_memory_subtest`.`created_at`"},
	UpdatedAt:    whereHelpertime_Time{field: "`visual_memory_subtest`.`updated_at`"},
}

// VisualMemorySubtestRels is where relationship names are stored.
var VisualMemorySubtestRels = struct {
	Evaluation string
}{
	Evaluation: "Evaluation",
}

// visualMemorySubtestR is where relationships are stored.
type visualMemorySubtestR struct {
	Evaluation *Evaluation `boil:"Evaluation" json:"Evaluation" toml:"Evaluation" yaml:"Evaluation"`
}

// NewStruct creates a new relationship struct
func (*visualMemorySubtestR) NewStruct() *visualMemorySubtestR {
	return &visualMemorySubtestR{}
}

func (o *VisualMemorySubtest) GetEvaluation() *Evaluation {
	if o == nil {
		return nil
	}

	return o.R.GetEvaluation()
}

func (r *visualMemorySubtestR) GetEvaluation() *Evaluation {
	if r == nil {
		return nil
	}

	return r.Evaluation
}

// visualMemorySubtestL is where Load methods for each relationship are stored.
type visualMemorySubtestL struct{}

var (
	visualMemorySubtestAllColumns            = []string{"id", "evaluation_id", "shape", "pass", "score", "reasons", "iou", "circularity", "angle_rmse", "side_cv", "center_x", "center_y", "bbox_w", "bbox_h", "created_at", "updated_at"}
	visualMemorySubtestColumnsWithoutDefault = []string{"id", "evaluation_id", "shape", "pass", "score", "reasons", "iou", "circularity", "angle_rmse", "side_cv", "center_x", "center_y", "bbox_w", "bbox_h"}
	visualMemorySubtestColumnsWithDefault    = []string{"created_at", "updated_at"}
	visualMemorySubtestPrimaryKeyColumns     = []string{"id"}
	visualMemorySubtestGeneratedColumns      = []string{}
)

type (
	// VisualMemorySubtestSlice is an alias for a slice of pointers to VisualMemorySubtest.
	// This should almost always be used instead of []VisualMemorySubtest.
	VisualMemorySubtestSlice []*VisualMemorySubtest
	// VisualMemorySubtestHook is the signature for custom VisualMemorySubtest hook methods
	VisualMemorySubtestHook func(context.Context, boil.ContextExecutor, *VisualMemorySubtest) error

	visualMemorySubtestQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	visualMemorySubtestType                 = reflect.TypeOf(&VisualMemorySubtest{})
	visualMemorySubtestMapping              = queries.MakeStructMapping(visualMemorySubtestType)
	visualMemorySubtestPrimaryKeyMapping, _ = queries.BindMapping(visualMemorySubtestType, visualMemorySubtestMapping, visualMemorySubtestPrimaryKeyColumns)
	visualMemorySubtestInsertCacheMut       sync.RWMutex
	visualMemorySubtestInsertCache          = make(map[string]insertCache)
	visualMemorySubtestUpdateCacheMut       sync.RWMutex
	visualMemorySubtestUpdateCache          = make(map[string]updateCache)
	visualMemorySubtestUpsertCacheMut       sync.RWMutex
	visualMemorySubtestUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var visualMemorySubtestAfterSelectMu sync.Mutex
var visualMemorySubtestAfterSelectHooks []VisualMemorySubtestHook

var visualMemorySubtestBeforeInsertMu sync.Mutex
var visualMemorySubtestBeforeInsertHooks []VisualMemorySubtestHook
var visualMemorySubtestAfterInsertMu sync.Mutex
var visualMemorySubtestAfterInsertHooks []VisualMemorySubtestHook

var visualMemorySubtestBeforeUpdateMu sync.Mutex
var visualMemorySubtestBeforeUpdateHooks []VisualMemorySubtestHook
var visualMemorySubtestAfterUpdateMu sync.Mutex
var visualMemorySubtestAfterUpdateHooks []VisualMemorySubtestHook

var visualMemorySubtestBeforeDeleteMu sync.Mutex
var visualMemorySubtestBeforeDeleteHooks []VisualMemorySubtestHook
var visualMemorySubtestAfterDeleteMu sync.Mutex
var visualMemorySubtestAfterDeleteHooks []VisualMemorySubtestHook

var visualMemorySubtestBeforeUpsertMu sync.Mutex
var visualMemorySubtestBeforeUpsertHooks []VisualMemorySubtestHook
var visualMemorySubtestAfterUpsertMu sync.Mutex
var visualMemorySubtestAfterUpsertHooks []VisualMemorySubtestHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *VisualMemorySubtest) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range visualMemorySubtestAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *VisualMemorySubtest) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range visualMemorySubtestBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *VisualMemorySubtest) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range visualMemorySubtestAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *VisualMemorySubtest) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range visualMemorySubtestBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *VisualMemorySubtest) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range visualMemorySubtestAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *VisualMemorySubtest) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range visualMemorySubtestBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *VisualMemorySubtest) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range visualMemorySubtestAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *VisualMemorySubtest) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range visualMemorySubtestBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *VisualMemorySubtest) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range visualMemorySubtestAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddVisualMemorySubtestHook registers your hook function for all future operations.
func AddVisualMemorySubtestHook(hookPoint boil.HookPoint, visualMemorySubtestHook VisualMemorySubtestHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		visualMemorySubtestAfterSelectMu.Lock()
		visualMemorySubtestAfterSelectHooks = append(visualMemorySubtestAfterSelectHooks, visualMemorySubtestHook)
		visualMemorySubtestAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		visualMemorySubtestBeforeInsertMu.Lock()
		visualMemorySubtestBeforeInsertHooks = append(visualMemorySubtestBeforeInsertHooks, visualMemorySubtestHook)
		visualMemorySubtestBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		visualMemorySubtestAfterInsertMu.Lock()
		visualMemorySubtestAfterInsertHooks = append(visualMemorySubtestAfterInsertHooks, visualMemorySubtestHook)
		visualMemorySubtestAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		visualMemorySubtestBeforeUpdateMu.Lock()
		visualMemorySubtestBeforeUpdateHooks = append(visualMemorySubtestBeforeUpdateHooks, visualMemorySubtestHook)
		visualMemorySubtestBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		visualMemorySubtestAfterUpdateMu.Lock()
		visualMemorySubtestAfterUpdateHooks = append(visualMemorySubtestAfterUpdateHooks, visualMemorySubtestHook)
		visualMemorySubtestAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		visualMemorySubtestBeforeDeleteMu.Lock()
		visualMemorySubtestBeforeDeleteHooks = append(visualMemorySubtestBeforeDeleteHooks, visualMemorySubtestHook)
		visualMemorySubtestBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		visualMemorySubtestAfterDeleteMu.Lock()
		visualMemorySubtestAfterDeleteHooks = append(visualMemorySubtestAfterDeleteHooks, visualMemorySubtestHook)
		visualMemorySubtestAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		visualMemorySubtestBeforeUpsertMu.Lock()
		visualMemorySubtestBeforeUpsertHooks = append(visualMemorySubtestBeforeUpsertHooks, visualMemorySubtestHook)
		visualMemorySubtestBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		visualMemorySubtestAfterUpsertMu.Lock()
		visualMemorySubtestAfterUpsertHooks = append(visualMemorySubtestAfterUpsertHooks, visualMemorySubtestHook)
		visualMemorySubtestAfterUpsertMu.Unlock()
	}
}

// One returns a single visualMemorySubtest record from the query.
func (q visualMemorySubtestQuery) One(ctx context.Context, exec boil.ContextExecutor) (*VisualMemorySubtest, error) {
	o := &VisualMemorySubtest{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbmodels: failed to execute a one query for visual_memory_subtest")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all VisualMemorySubtest records from the query.
func (q visualMemorySubtestQuery) All(ctx context.Context, exec boil.ContextExecutor) (VisualMemorySubtestSlice, error) {
	var o []*VisualMemorySubtest

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "dbmodels: failed to assign all query results to VisualMemorySubtest slice")
	}

	if len(visualMemorySubtestAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all VisualMemorySubtest records in the query.
func (q visualMemorySubtestQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to count visual_memory_subtest rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q visualMemorySubtestQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "dbmodels: failed to check if visual_memory_subtest exists")
	}

	return count > 0, nil
}

// Evaluation pointed to by the foreign key.
func (o *VisualMemorySubtest) Evaluation(mods ...qm.QueryMod) evaluationQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.EvaluationID),
	}

	queryMods = append(queryMods, mods...)

	return Evaluations(queryMods...)
}

// LoadEvaluation allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (visualMemorySubtestL) LoadEvaluation(ctx context.Context, e boil.ContextExecutor, singular bool, maybeVisualMemorySubtest interface{}, mods queries.Applicator) error {
	var slice []*VisualMemorySubtest
	var object *VisualMemorySubtest

	if singular {
		var ok bool
		object, ok = maybeVisualMemorySubtest.(*VisualMemorySubtest)
		if !ok {
			object = new(VisualMemorySubtest)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeVisualMemorySubtest)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeVisualMemorySubtest))
			}
		}
	} else {
		s, ok := maybeVisualMemorySubtest.(*[]*VisualMemorySubtest)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeVisualMemorySubtest)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeVisualMemorySubtest))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &visualMemorySubtestR{}
		}
		args[object.EvaluationID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &visualMemorySubtestR{}
			}

			args[obj.EvaluationID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`evaluations`),
		qm.WhereIn(`evaluations.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Evaluation")
	}

	var resultSlice []*Evaluation
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Evaluation")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for evaluations")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for evaluations")
	}

	if len(evaluationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Evaluation = foreign
		if foreign.R == nil {
			foreign.R = &evaluationR{}
		}
		foreign.R.VisualMemorySubtests = append(foreign.R.VisualMemorySubtests, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.EvaluationID == foreign.ID {
				local.R.Evaluation = foreign
				if foreign.R == nil {
					foreign.R = &evaluationR{}
				}
				foreign.R.VisualMemorySubtests = append(foreign.R.VisualMemorySubtests, local)
				break
			}
		}
	}

	return nil
}

// SetEvaluation of the visualMemorySubtest to the related item.
// Sets o.R.Evaluation to related.
// Adds o to related.R.VisualMemorySubtests.
func (o *VisualMemorySubtest) SetEvaluation(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Evaluation) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `visual_memory_subtest` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"evaluation_id"}),
		strmangle.WhereClause("`", "`", 0, visualMemorySubtestPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.EvaluationID = related.ID
	if o.R == nil {
		o.R = &visualMemorySubtestR{
			Evaluation: related,
		}
	} else {
		o.R.Evaluation = related
	}

	if related.R == nil {
		related.R = &evaluationR{
			VisualMemorySubtests: VisualMemorySubtestSlice{o},
		}
	} else {
		related.R.VisualMemorySubtests = append(related.R.VisualMemorySubtests, o)
	}

	return nil
}

// VisualMemorySubtests retrieves all the records using an executor.
func VisualMemorySubtests(mods ...qm.QueryMod) visualMemorySubtestQuery {
	mods = append(mods, qm.From("`visual_memory_subtest`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`visual_memory_subtest`.*"})
	}

	return visualMemorySubtestQuery{q}
}

// FindVisualMemorySubtest retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindVisualMemorySubtest(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*VisualMemorySubtest, error) {
	visualMemorySubtestObj := &VisualMemorySubtest{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `visual_memory_subtest` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, visualMemorySubtestObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbmodels: unable to select from visual_memory_subtest")
	}

	if err = visualMemorySubtestObj.doAfterSelectHooks(ctx, exec); err != nil {
		return visualMemorySubtestObj, err
	}

	return visualMemorySubtestObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *VisualMemorySubtest) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("dbmodels: no visual_memory_subtest provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(visualMemorySubtestColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	visualMemorySubtestInsertCacheMut.RLock()
	cache, cached := visualMemorySubtestInsertCache[key]
	visualMemorySubtestInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			visualMemorySubtestAllColumns,
			visualMemorySubtestColumnsWithDefault,
			visualMemorySubtestColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(visualMemorySubtestType, visualMemorySubtestMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(visualMemorySubtestType, visualMemorySubtestMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `visual_memory_subtest` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `visual_memory_subtest` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `visual_memory_subtest` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, visualMemorySubtestPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to insert into visual_memory_subtest")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to populate default values for visual_memory_subtest")
	}

CacheNoHooks:
	if !cached {
		visualMemorySubtestInsertCacheMut.Lock()
		visualMemorySubtestInsertCache[key] = cache
		visualMemorySubtestInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the VisualMemorySubtest.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *VisualMemorySubtest) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	visualMemorySubtestUpdateCacheMut.RLock()
	cache, cached := visualMemorySubtestUpdateCache[key]
	visualMemorySubtestUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			visualMemorySubtestAllColumns,
			visualMemorySubtestPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("dbmodels: unable to update visual_memory_subtest, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `visual_memory_subtest` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, visualMemorySubtestPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(visualMemorySubtestType, visualMemorySubtestMapping, append(wl, visualMemorySubtestPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to update visual_memory_subtest row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by update for visual_memory_subtest")
	}

	if !cached {
		visualMemorySubtestUpdateCacheMut.Lock()
		visualMemorySubtestUpdateCache[key] = cache
		visualMemorySubtestUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q visualMemorySubtestQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to update all for visual_memory_subtest")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to retrieve rows affected for visual_memory_subtest")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o VisualMemorySubtestSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("dbmodels: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), visualMemorySubtestPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `visual_memory_subtest` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, visualMemorySubtestPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to update all in visualMemorySubtest slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to retrieve rows affected all in update all visualMemorySubtest")
	}
	return rowsAff, nil
}

var mySQLVisualMemorySubtestUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *VisualMemorySubtest) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("dbmodels: no visual_memory_subtest provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(visualMemorySubtestColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLVisualMemorySubtestUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	visualMemorySubtestUpsertCacheMut.RLock()
	cache, cached := visualMemorySubtestUpsertCache[key]
	visualMemorySubtestUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			visualMemorySubtestAllColumns,
			visualMemorySubtestColumnsWithDefault,
			visualMemorySubtestColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			visualMemorySubtestAllColumns,
			visualMemorySubtestPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("dbmodels: unable to upsert visual_memory_subtest, could not build update column list")
		}

		ret := strmangle.SetComplement(visualMemorySubtestAllColumns, strmangle.SetIntersect(insert, update))

		cache.query = buildUpsertQueryMySQL(dialect, "`visual_memory_subtest`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `visual_memory_subtest` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(visualMemorySubtestType, visualMemorySubtestMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(visualMemorySubtestType, visualMemorySubtestMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to upsert for visual_memory_subtest")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(visualMemorySubtestType, visualMemorySubtestMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to retrieve unique values for visual_memory_subtest")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to populate default values for visual_memory_subtest")
	}

CacheNoHooks:
	if !cached {
		visualMemorySubtestUpsertCacheMut.Lock()
		visualMemorySubtestUpsertCache[key] = cache
		visualMemorySubtestUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single VisualMemorySubtest record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *VisualMemorySubtest) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("dbmodels: no VisualMemorySubtest provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), visualMemorySubtestPrimaryKeyMapping)
	sql := "DELETE FROM `visual_memory_subtest` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to delete from visual_memory_subtest")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by delete for visual_memory_subtest")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q visualMemorySubtestQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("dbmodels: no visualMemorySubtestQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to delete all from visual_memory_subtest")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by deleteall for visual_memory_subtest")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o VisualMemorySubtestSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(visualMemorySubtestBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), visualMemorySubtestPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `visual_memory_subtest` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, visualMemorySubtestPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to delete all from visualMemorySubtest slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by deleteall for visual_memory_subtest")
	}

	if len(visualMemorySubtestAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *VisualMemorySubtest) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindVisualMemorySubtest(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *VisualMemorySubtestSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := VisualMemorySubtestSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), visualMemorySubtestPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `visual_memory_subtest`.* FROM `visual_memory_subtest` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, visualMemorySubtestPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to reload all in VisualMemorySubtestSlice")
	}

	*o = slice

	return nil
}

// VisualMemorySubtestExists checks if the VisualMemorySubtest row exists.
func VisualMemorySubtestExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `visual_memory_subtest` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "dbmodels: unable to check if visual_memory_subtest exists")
	}

	return exists, nil
}

// Exists checks if the VisualMemorySubtest row exists.
func (o *VisualMemorySubtest) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return VisualMemorySubtestExists(ctx, exec, o.ID)
}
