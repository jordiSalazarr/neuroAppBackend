// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dbmodels

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/aarondl/null/v8"
	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/sqlboiler/v4/queries/qm"
	"github.com/aarondl/sqlboiler/v4/queries/qmhelper"
	"github.com/aarondl/strmangle"
	"github.com/friendsofgo/errors"
)

// LanguageFluency is an object representing the database table.
type LanguageFluency struct {
	ID                string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	EvaluationID      string      `boil:"evaluation_id" json:"evaluation_id" toml:"evaluation_id" yaml:"evaluation_id"`
	Language          string      `boil:"language" json:"language" toml:"language" yaml:"language"`
	Proficiency       string      `boil:"proficiency" json:"proficiency" toml:"proficiency" yaml:"proficiency"`
	Category          string      `boil:"category" json:"category" toml:"category" yaml:"category"`
	AnswerWords       null.JSON   `boil:"answer_words" json:"answer_words,omitempty" toml:"answer_words" yaml:"answer_words,omitempty"`
	Score             int         `boil:"score" json:"score" toml:"score" yaml:"score"`
	UniqueValid       int         `boil:"unique_valid" json:"unique_valid" toml:"unique_valid" yaml:"unique_valid"`
	Intrusions        int         `boil:"intrusions" json:"intrusions" toml:"intrusions" yaml:"intrusions"`
	Perseverations    int         `boil:"perseverations" json:"perseverations" toml:"perseverations" yaml:"perseverations"`
	TotalProduced     int         `boil:"total_produced" json:"total_produced" toml:"total_produced" yaml:"total_produced"`
	WordsPerMinute    float64     `boil:"words_per_minute" json:"words_per_minute" toml:"words_per_minute" yaml:"words_per_minute"`
	IntrusionRate     float64     `boil:"intrusion_rate" json:"intrusion_rate" toml:"intrusion_rate" yaml:"intrusion_rate"`
	PersevRate        float64     `boil:"persev_rate" json:"persev_rate" toml:"persev_rate" yaml:"persev_rate"`
	AssistantAnalysis null.String `boil:"assistant_analysis" json:"assistant_analysis,omitempty" toml:"assistant_analysis" yaml:"assistant_analysis,omitempty"`
	CreatedAt         time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *languageFluencyR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L languageFluencyL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var LanguageFluencyColumns = struct {
	ID                string
	EvaluationID      string
	Language          string
	Proficiency       string
	Category          string
	AnswerWords       string
	Score             string
	UniqueValid       string
	Intrusions        string
	Perseverations    string
	TotalProduced     string
	WordsPerMinute    string
	IntrusionRate     string
	PersevRate        string
	AssistantAnalysis string
	CreatedAt         string
}{
	ID:                "id",
	EvaluationID:      "evaluation_id",
	Language:          "language",
	Proficiency:       "proficiency",
	Category:          "category",
	AnswerWords:       "answer_words",
	Score:             "score",
	UniqueValid:       "unique_valid",
	Intrusions:        "intrusions",
	Perseverations:    "perseverations",
	TotalProduced:     "total_produced",
	WordsPerMinute:    "words_per_minute",
	IntrusionRate:     "intrusion_rate",
	PersevRate:        "persev_rate",
	AssistantAnalysis: "assistant_analysis",
	CreatedAt:         "created_at",
}

var LanguageFluencyTableColumns = struct {
	ID                string
	EvaluationID      string
	Language          string
	Proficiency       string
	Category          string
	AnswerWords       string
	Score             string
	UniqueValid       string
	Intrusions        string
	Perseverations    string
	TotalProduced     string
	WordsPerMinute    string
	IntrusionRate     string
	PersevRate        string
	AssistantAnalysis string
	CreatedAt         string
}{
	ID:                "language_fluencies.id",
	EvaluationID:      "language_fluencies.evaluation_id",
	Language:          "language_fluencies.language",
	Proficiency:       "language_fluencies.proficiency",
	Category:          "language_fluencies.category",
	AnswerWords:       "language_fluencies.answer_words",
	Score:             "language_fluencies.score",
	UniqueValid:       "language_fluencies.unique_valid",
	Intrusions:        "language_fluencies.intrusions",
	Perseverations:    "language_fluencies.perseverations",
	TotalProduced:     "language_fluencies.total_produced",
	WordsPerMinute:    "language_fluencies.words_per_minute",
	IntrusionRate:     "language_fluencies.intrusion_rate",
	PersevRate:        "language_fluencies.persev_rate",
	AssistantAnalysis: "language_fluencies.assistant_analysis",
	CreatedAt:         "language_fluencies.created_at",
}

// Generated where

type whereHelpernull_JSON struct{ field string }

func (w whereHelpernull_JSON) EQ(x null.JSON) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_JSON) NEQ(x null.JSON) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_JSON) LT(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_JSON) LTE(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_JSON) GT(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_JSON) GTE(x null.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_JSON) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_JSON) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var LanguageFluencyWhere = struct {
	ID                whereHelperstring
	EvaluationID      whereHelperstring
	Language          whereHelperstring
	Proficiency       whereHelperstring
	Category          whereHelperstring
	AnswerWords       whereHelpernull_JSON
	Score             whereHelperint
	UniqueValid       whereHelperint
	Intrusions        whereHelperint
	Perseverations    whereHelperint
	TotalProduced     whereHelperint
	WordsPerMinute    whereHelperfloat64
	IntrusionRate     whereHelperfloat64
	PersevRate        whereHelperfloat64
	AssistantAnalysis whereHelpernull_String
	CreatedAt         whereHelpertime_Time
}{
	ID:                whereHelperstring{field: "`language_fluencies`.`id`"},
	EvaluationID:      whereHelperstring{field: "`language_fluencies`.`evaluation_id`"},
	Language:          whereHelperstring{field: "`language_fluencies`.`language`"},
	Proficiency:       whereHelperstring{field: "`language_fluencies`.`proficiency`"},
	Category:          whereHelperstring{field: "`language_fluencies`.`category`"},
	AnswerWords:       whereHelpernull_JSON{field: "`language_fluencies`.`answer_words`"},
	Score:             whereHelperint{field: "`language_fluencies`.`score`"},
	UniqueValid:       whereHelperint{field: "`language_fluencies`.`unique_valid`"},
	Intrusions:        whereHelperint{field: "`language_fluencies`.`intrusions`"},
	Perseverations:    whereHelperint{field: "`language_fluencies`.`perseverations`"},
	TotalProduced:     whereHelperint{field: "`language_fluencies`.`total_produced`"},
	WordsPerMinute:    whereHelperfloat64{field: "`language_fluencies`.`words_per_minute`"},
	IntrusionRate:     whereHelperfloat64{field: "`language_fluencies`.`intrusion_rate`"},
	PersevRate:        whereHelperfloat64{field: "`language_fluencies`.`persev_rate`"},
	AssistantAnalysis: whereHelpernull_String{field: "`language_fluencies`.`assistant_analysis`"},
	CreatedAt:         whereHelpertime_Time{field: "`language_fluencies`.`created_at`"},
}

// LanguageFluencyRels is where relationship names are stored.
var LanguageFluencyRels = struct {
	Evaluation string
}{
	Evaluation: "Evaluation",
}

// languageFluencyR is where relationships are stored.
type languageFluencyR struct {
	Evaluation *Evaluation `boil:"Evaluation" json:"Evaluation" toml:"Evaluation" yaml:"Evaluation"`
}

// NewStruct creates a new relationship struct
func (*languageFluencyR) NewStruct() *languageFluencyR {
	return &languageFluencyR{}
}

func (o *LanguageFluency) GetEvaluation() *Evaluation {
	if o == nil {
		return nil
	}

	return o.R.GetEvaluation()
}

func (r *languageFluencyR) GetEvaluation() *Evaluation {
	if r == nil {
		return nil
	}

	return r.Evaluation
}

// languageFluencyL is where Load methods for each relationship are stored.
type languageFluencyL struct{}

var (
	languageFluencyAllColumns            = []string{"id", "evaluation_id", "language", "proficiency", "category", "answer_words", "score", "unique_valid", "intrusions", "perseverations", "total_produced", "words_per_minute", "intrusion_rate", "persev_rate", "assistant_analysis", "created_at"}
	languageFluencyColumnsWithoutDefault = []string{"id", "evaluation_id", "language", "proficiency", "category", "answer_words", "score", "unique_valid", "intrusions", "perseverations", "total_produced", "words_per_minute", "intrusion_rate", "persev_rate", "assistant_analysis"}
	languageFluencyColumnsWithDefault    = []string{"created_at"}
	languageFluencyPrimaryKeyColumns     = []string{"id"}
	languageFluencyGeneratedColumns      = []string{}
)

type (
	// LanguageFluencySlice is an alias for a slice of pointers to LanguageFluency.
	// This should almost always be used instead of []LanguageFluency.
	LanguageFluencySlice []*LanguageFluency
	// LanguageFluencyHook is the signature for custom LanguageFluency hook methods
	LanguageFluencyHook func(context.Context, boil.ContextExecutor, *LanguageFluency) error

	languageFluencyQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	languageFluencyType                 = reflect.TypeOf(&LanguageFluency{})
	languageFluencyMapping              = queries.MakeStructMapping(languageFluencyType)
	languageFluencyPrimaryKeyMapping, _ = queries.BindMapping(languageFluencyType, languageFluencyMapping, languageFluencyPrimaryKeyColumns)
	languageFluencyInsertCacheMut       sync.RWMutex
	languageFluencyInsertCache          = make(map[string]insertCache)
	languageFluencyUpdateCacheMut       sync.RWMutex
	languageFluencyUpdateCache          = make(map[string]updateCache)
	languageFluencyUpsertCacheMut       sync.RWMutex
	languageFluencyUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var languageFluencyAfterSelectMu sync.Mutex
var languageFluencyAfterSelectHooks []LanguageFluencyHook

var languageFluencyBeforeInsertMu sync.Mutex
var languageFluencyBeforeInsertHooks []LanguageFluencyHook
var languageFluencyAfterInsertMu sync.Mutex
var languageFluencyAfterInsertHooks []LanguageFluencyHook

var languageFluencyBeforeUpdateMu sync.Mutex
var languageFluencyBeforeUpdateHooks []LanguageFluencyHook
var languageFluencyAfterUpdateMu sync.Mutex
var languageFluencyAfterUpdateHooks []LanguageFluencyHook

var languageFluencyBeforeDeleteMu sync.Mutex
var languageFluencyBeforeDeleteHooks []LanguageFluencyHook
var languageFluencyAfterDeleteMu sync.Mutex
var languageFluencyAfterDeleteHooks []LanguageFluencyHook

var languageFluencyBeforeUpsertMu sync.Mutex
var languageFluencyBeforeUpsertHooks []LanguageFluencyHook
var languageFluencyAfterUpsertMu sync.Mutex
var languageFluencyAfterUpsertHooks []LanguageFluencyHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *LanguageFluency) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range languageFluencyAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *LanguageFluency) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range languageFluencyBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *LanguageFluency) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range languageFluencyAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *LanguageFluency) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range languageFluencyBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *LanguageFluency) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range languageFluencyAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *LanguageFluency) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range languageFluencyBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *LanguageFluency) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range languageFluencyAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *LanguageFluency) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range languageFluencyBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *LanguageFluency) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range languageFluencyAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddLanguageFluencyHook registers your hook function for all future operations.
func AddLanguageFluencyHook(hookPoint boil.HookPoint, languageFluencyHook LanguageFluencyHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		languageFluencyAfterSelectMu.Lock()
		languageFluencyAfterSelectHooks = append(languageFluencyAfterSelectHooks, languageFluencyHook)
		languageFluencyAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		languageFluencyBeforeInsertMu.Lock()
		languageFluencyBeforeInsertHooks = append(languageFluencyBeforeInsertHooks, languageFluencyHook)
		languageFluencyBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		languageFluencyAfterInsertMu.Lock()
		languageFluencyAfterInsertHooks = append(languageFluencyAfterInsertHooks, languageFluencyHook)
		languageFluencyAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		languageFluencyBeforeUpdateMu.Lock()
		languageFluencyBeforeUpdateHooks = append(languageFluencyBeforeUpdateHooks, languageFluencyHook)
		languageFluencyBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		languageFluencyAfterUpdateMu.Lock()
		languageFluencyAfterUpdateHooks = append(languageFluencyAfterUpdateHooks, languageFluencyHook)
		languageFluencyAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		languageFluencyBeforeDeleteMu.Lock()
		languageFluencyBeforeDeleteHooks = append(languageFluencyBeforeDeleteHooks, languageFluencyHook)
		languageFluencyBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		languageFluencyAfterDeleteMu.Lock()
		languageFluencyAfterDeleteHooks = append(languageFluencyAfterDeleteHooks, languageFluencyHook)
		languageFluencyAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		languageFluencyBeforeUpsertMu.Lock()
		languageFluencyBeforeUpsertHooks = append(languageFluencyBeforeUpsertHooks, languageFluencyHook)
		languageFluencyBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		languageFluencyAfterUpsertMu.Lock()
		languageFluencyAfterUpsertHooks = append(languageFluencyAfterUpsertHooks, languageFluencyHook)
		languageFluencyAfterUpsertMu.Unlock()
	}
}

// One returns a single languageFluency record from the query.
func (q languageFluencyQuery) One(ctx context.Context, exec boil.ContextExecutor) (*LanguageFluency, error) {
	o := &LanguageFluency{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbmodels: failed to execute a one query for language_fluencies")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all LanguageFluency records from the query.
func (q languageFluencyQuery) All(ctx context.Context, exec boil.ContextExecutor) (LanguageFluencySlice, error) {
	var o []*LanguageFluency

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "dbmodels: failed to assign all query results to LanguageFluency slice")
	}

	if len(languageFluencyAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all LanguageFluency records in the query.
func (q languageFluencyQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to count language_fluencies rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q languageFluencyQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "dbmodels: failed to check if language_fluencies exists")
	}

	return count > 0, nil
}

// Evaluation pointed to by the foreign key.
func (o *LanguageFluency) Evaluation(mods ...qm.QueryMod) evaluationQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.EvaluationID),
	}

	queryMods = append(queryMods, mods...)

	return Evaluations(queryMods...)
}

// LoadEvaluation allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (languageFluencyL) LoadEvaluation(ctx context.Context, e boil.ContextExecutor, singular bool, maybeLanguageFluency interface{}, mods queries.Applicator) error {
	var slice []*LanguageFluency
	var object *LanguageFluency

	if singular {
		var ok bool
		object, ok = maybeLanguageFluency.(*LanguageFluency)
		if !ok {
			object = new(LanguageFluency)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeLanguageFluency)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeLanguageFluency))
			}
		}
	} else {
		s, ok := maybeLanguageFluency.(*[]*LanguageFluency)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeLanguageFluency)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeLanguageFluency))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &languageFluencyR{}
		}
		args[object.EvaluationID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &languageFluencyR{}
			}

			args[obj.EvaluationID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`evaluations`),
		qm.WhereIn(`evaluations.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Evaluation")
	}

	var resultSlice []*Evaluation
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Evaluation")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for evaluations")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for evaluations")
	}

	if len(evaluationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Evaluation = foreign
		if foreign.R == nil {
			foreign.R = &evaluationR{}
		}
		foreign.R.LanguageFluencies = append(foreign.R.LanguageFluencies, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.EvaluationID == foreign.ID {
				local.R.Evaluation = foreign
				if foreign.R == nil {
					foreign.R = &evaluationR{}
				}
				foreign.R.LanguageFluencies = append(foreign.R.LanguageFluencies, local)
				break
			}
		}
	}

	return nil
}

// SetEvaluation of the languageFluency to the related item.
// Sets o.R.Evaluation to related.
// Adds o to related.R.LanguageFluencies.
func (o *LanguageFluency) SetEvaluation(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Evaluation) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `language_fluencies` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"evaluation_id"}),
		strmangle.WhereClause("`", "`", 0, languageFluencyPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.EvaluationID = related.ID
	if o.R == nil {
		o.R = &languageFluencyR{
			Evaluation: related,
		}
	} else {
		o.R.Evaluation = related
	}

	if related.R == nil {
		related.R = &evaluationR{
			LanguageFluencies: LanguageFluencySlice{o},
		}
	} else {
		related.R.LanguageFluencies = append(related.R.LanguageFluencies, o)
	}

	return nil
}

// LanguageFluencies retrieves all the records using an executor.
func LanguageFluencies(mods ...qm.QueryMod) languageFluencyQuery {
	mods = append(mods, qm.From("`language_fluencies`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`language_fluencies`.*"})
	}

	return languageFluencyQuery{q}
}

// FindLanguageFluency retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindLanguageFluency(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*LanguageFluency, error) {
	languageFluencyObj := &LanguageFluency{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `language_fluencies` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, languageFluencyObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbmodels: unable to select from language_fluencies")
	}

	if err = languageFluencyObj.doAfterSelectHooks(ctx, exec); err != nil {
		return languageFluencyObj, err
	}

	return languageFluencyObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *LanguageFluency) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("dbmodels: no language_fluencies provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(languageFluencyColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	languageFluencyInsertCacheMut.RLock()
	cache, cached := languageFluencyInsertCache[key]
	languageFluencyInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			languageFluencyAllColumns,
			languageFluencyColumnsWithDefault,
			languageFluencyColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(languageFluencyType, languageFluencyMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(languageFluencyType, languageFluencyMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `language_fluencies` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `language_fluencies` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `language_fluencies` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, languageFluencyPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to insert into language_fluencies")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to populate default values for language_fluencies")
	}

CacheNoHooks:
	if !cached {
		languageFluencyInsertCacheMut.Lock()
		languageFluencyInsertCache[key] = cache
		languageFluencyInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the LanguageFluency.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *LanguageFluency) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	languageFluencyUpdateCacheMut.RLock()
	cache, cached := languageFluencyUpdateCache[key]
	languageFluencyUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			languageFluencyAllColumns,
			languageFluencyPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("dbmodels: unable to update language_fluencies, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `language_fluencies` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, languageFluencyPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(languageFluencyType, languageFluencyMapping, append(wl, languageFluencyPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to update language_fluencies row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by update for language_fluencies")
	}

	if !cached {
		languageFluencyUpdateCacheMut.Lock()
		languageFluencyUpdateCache[key] = cache
		languageFluencyUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q languageFluencyQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to update all for language_fluencies")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to retrieve rows affected for language_fluencies")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o LanguageFluencySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("dbmodels: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), languageFluencyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `language_fluencies` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, languageFluencyPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to update all in languageFluency slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to retrieve rows affected all in update all languageFluency")
	}
	return rowsAff, nil
}

var mySQLLanguageFluencyUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *LanguageFluency) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("dbmodels: no language_fluencies provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(languageFluencyColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLLanguageFluencyUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	languageFluencyUpsertCacheMut.RLock()
	cache, cached := languageFluencyUpsertCache[key]
	languageFluencyUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			languageFluencyAllColumns,
			languageFluencyColumnsWithDefault,
			languageFluencyColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			languageFluencyAllColumns,
			languageFluencyPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("dbmodels: unable to upsert language_fluencies, could not build update column list")
		}

		ret := strmangle.SetComplement(languageFluencyAllColumns, strmangle.SetIntersect(insert, update))

		cache.query = buildUpsertQueryMySQL(dialect, "`language_fluencies`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `language_fluencies` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(languageFluencyType, languageFluencyMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(languageFluencyType, languageFluencyMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to upsert for language_fluencies")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(languageFluencyType, languageFluencyMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to retrieve unique values for language_fluencies")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to populate default values for language_fluencies")
	}

CacheNoHooks:
	if !cached {
		languageFluencyUpsertCacheMut.Lock()
		languageFluencyUpsertCache[key] = cache
		languageFluencyUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single LanguageFluency record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *LanguageFluency) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("dbmodels: no LanguageFluency provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), languageFluencyPrimaryKeyMapping)
	sql := "DELETE FROM `language_fluencies` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to delete from language_fluencies")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by delete for language_fluencies")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q languageFluencyQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("dbmodels: no languageFluencyQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to delete all from language_fluencies")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by deleteall for language_fluencies")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o LanguageFluencySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(languageFluencyBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), languageFluencyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `language_fluencies` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, languageFluencyPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to delete all from languageFluency slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by deleteall for language_fluencies")
	}

	if len(languageFluencyAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *LanguageFluency) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindLanguageFluency(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *LanguageFluencySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := LanguageFluencySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), languageFluencyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `language_fluencies`.* FROM `language_fluencies` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, languageFluencyPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to reload all in LanguageFluencySlice")
	}

	*o = slice

	return nil
}

// LanguageFluencyExists checks if the LanguageFluency row exists.
func LanguageFluencyExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `language_fluencies` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "dbmodels: unable to check if language_fluencies exists")
	}

	return exists, nil
}

// Exists checks if the LanguageFluency row exists.
func (o *LanguageFluency) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return LanguageFluencyExists(ctx, exec, o.ID)
}
