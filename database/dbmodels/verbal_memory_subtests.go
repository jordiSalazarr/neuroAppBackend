// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dbmodels

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/sqlboiler/v4/queries/qm"
	"github.com/aarondl/sqlboiler/v4/queries/qmhelper"
	"github.com/aarondl/sqlboiler/v4/types"
	"github.com/aarondl/strmangle"
	"github.com/friendsofgo/errors"
)

// VerbalMemorySubtest is an object representing the database table.
type VerbalMemorySubtest struct {
	ID                     string     `boil:"id" json:"id" toml:"id" yaml:"id"`
	EvaluationID           string     `boil:"evaluation_id" json:"evaluation_id" toml:"evaluation_id" yaml:"evaluation_id"`
	SecondsFromStart       int64      `boil:"seconds_from_start" json:"seconds_from_start" toml:"seconds_from_start" yaml:"seconds_from_start"`
	Type                   string     `boil:"type" json:"type" toml:"type" yaml:"type"`
	GivenWords             types.JSON `boil:"given_words" json:"given_words" toml:"given_words" yaml:"given_words"`
	RecalledWords          types.JSON `boil:"recalled_words" json:"recalled_words" toml:"recalled_words" yaml:"recalled_words"`
	ScoreScore             int        `boil:"score_score" json:"score_score" toml:"score_score" yaml:"score_score"`
	ScoreHits              int        `boil:"score_hits" json:"score_hits" toml:"score_hits" yaml:"score_hits"`
	ScoreOmissions         int        `boil:"score_omissions" json:"score_omissions" toml:"score_omissions" yaml:"score_omissions"`
	ScoreIntrusions        int        `boil:"score_intrusions" json:"score_intrusions" toml:"score_intrusions" yaml:"score_intrusions"`
	ScorePerseverations    int        `boil:"score_perseverations" json:"score_perseverations" toml:"score_perseverations" yaml:"score_perseverations"`
	ScoreAccuracy          float64    `boil:"score_accuracy" json:"score_accuracy" toml:"score_accuracy" yaml:"score_accuracy"`
	ScoreIntrusionRate     float64    `boil:"score_intrusion_rate" json:"score_intrusion_rate" toml:"score_intrusion_rate" yaml:"score_intrusion_rate"`
	ScorePerseverationRate float64    `boil:"score_perseveration_rate" json:"score_perseveration_rate" toml:"score_perseveration_rate" yaml:"score_perseveration_rate"`
	AssistanAnalysis       string     `boil:"assistan_analysis" json:"assistan_analysis" toml:"assistan_analysis" yaml:"assistan_analysis"`
	CreatedAt              time.Time  `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *verbalMemorySubtestR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L verbalMemorySubtestL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var VerbalMemorySubtestColumns = struct {
	ID                     string
	EvaluationID           string
	SecondsFromStart       string
	Type                   string
	GivenWords             string
	RecalledWords          string
	ScoreScore             string
	ScoreHits              string
	ScoreOmissions         string
	ScoreIntrusions        string
	ScorePerseverations    string
	ScoreAccuracy          string
	ScoreIntrusionRate     string
	ScorePerseverationRate string
	AssistanAnalysis       string
	CreatedAt              string
}{
	ID:                     "id",
	EvaluationID:           "evaluation_id",
	SecondsFromStart:       "seconds_from_start",
	Type:                   "type",
	GivenWords:             "given_words",
	RecalledWords:          "recalled_words",
	ScoreScore:             "score_score",
	ScoreHits:              "score_hits",
	ScoreOmissions:         "score_omissions",
	ScoreIntrusions:        "score_intrusions",
	ScorePerseverations:    "score_perseverations",
	ScoreAccuracy:          "score_accuracy",
	ScoreIntrusionRate:     "score_intrusion_rate",
	ScorePerseverationRate: "score_perseveration_rate",
	AssistanAnalysis:       "assistan_analysis",
	CreatedAt:              "created_at",
}

var VerbalMemorySubtestTableColumns = struct {
	ID                     string
	EvaluationID           string
	SecondsFromStart       string
	Type                   string
	GivenWords             string
	RecalledWords          string
	ScoreScore             string
	ScoreHits              string
	ScoreOmissions         string
	ScoreIntrusions        string
	ScorePerseverations    string
	ScoreAccuracy          string
	ScoreIntrusionRate     string
	ScorePerseverationRate string
	AssistanAnalysis       string
	CreatedAt              string
}{
	ID:                     "verbal_memory_subtests.id",
	EvaluationID:           "verbal_memory_subtests.evaluation_id",
	SecondsFromStart:       "verbal_memory_subtests.seconds_from_start",
	Type:                   "verbal_memory_subtests.type",
	GivenWords:             "verbal_memory_subtests.given_words",
	RecalledWords:          "verbal_memory_subtests.recalled_words",
	ScoreScore:             "verbal_memory_subtests.score_score",
	ScoreHits:              "verbal_memory_subtests.score_hits",
	ScoreOmissions:         "verbal_memory_subtests.score_omissions",
	ScoreIntrusions:        "verbal_memory_subtests.score_intrusions",
	ScorePerseverations:    "verbal_memory_subtests.score_perseverations",
	ScoreAccuracy:          "verbal_memory_subtests.score_accuracy",
	ScoreIntrusionRate:     "verbal_memory_subtests.score_intrusion_rate",
	ScorePerseverationRate: "verbal_memory_subtests.score_perseveration_rate",
	AssistanAnalysis:       "verbal_memory_subtests.assistan_analysis",
	CreatedAt:              "verbal_memory_subtests.created_at",
}

// Generated where

type whereHelperint64 struct{ field string }

func (w whereHelperint64) EQ(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint64) NEQ(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint64) LT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint64) LTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint64) GT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint64) GTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint64) IN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint64) NIN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var VerbalMemorySubtestWhere = struct {
	ID                     whereHelperstring
	EvaluationID           whereHelperstring
	SecondsFromStart       whereHelperint64
	Type                   whereHelperstring
	GivenWords             whereHelpertypes_JSON
	RecalledWords          whereHelpertypes_JSON
	ScoreScore             whereHelperint
	ScoreHits              whereHelperint
	ScoreOmissions         whereHelperint
	ScoreIntrusions        whereHelperint
	ScorePerseverations    whereHelperint
	ScoreAccuracy          whereHelperfloat64
	ScoreIntrusionRate     whereHelperfloat64
	ScorePerseverationRate whereHelperfloat64
	AssistanAnalysis       whereHelperstring
	CreatedAt              whereHelpertime_Time
}{
	ID:                     whereHelperstring{field: "`verbal_memory_subtests`.`id`"},
	EvaluationID:           whereHelperstring{field: "`verbal_memory_subtests`.`evaluation_id`"},
	SecondsFromStart:       whereHelperint64{field: "`verbal_memory_subtests`.`seconds_from_start`"},
	Type:                   whereHelperstring{field: "`verbal_memory_subtests`.`type`"},
	GivenWords:             whereHelpertypes_JSON{field: "`verbal_memory_subtests`.`given_words`"},
	RecalledWords:          whereHelpertypes_JSON{field: "`verbal_memory_subtests`.`recalled_words`"},
	ScoreScore:             whereHelperint{field: "`verbal_memory_subtests`.`score_score`"},
	ScoreHits:              whereHelperint{field: "`verbal_memory_subtests`.`score_hits`"},
	ScoreOmissions:         whereHelperint{field: "`verbal_memory_subtests`.`score_omissions`"},
	ScoreIntrusions:        whereHelperint{field: "`verbal_memory_subtests`.`score_intrusions`"},
	ScorePerseverations:    whereHelperint{field: "`verbal_memory_subtests`.`score_perseverations`"},
	ScoreAccuracy:          whereHelperfloat64{field: "`verbal_memory_subtests`.`score_accuracy`"},
	ScoreIntrusionRate:     whereHelperfloat64{field: "`verbal_memory_subtests`.`score_intrusion_rate`"},
	ScorePerseverationRate: whereHelperfloat64{field: "`verbal_memory_subtests`.`score_perseveration_rate`"},
	AssistanAnalysis:       whereHelperstring{field: "`verbal_memory_subtests`.`assistan_analysis`"},
	CreatedAt:              whereHelpertime_Time{field: "`verbal_memory_subtests`.`created_at`"},
}

// VerbalMemorySubtestRels is where relationship names are stored.
var VerbalMemorySubtestRels = struct {
	Evaluation string
}{
	Evaluation: "Evaluation",
}

// verbalMemorySubtestR is where relationships are stored.
type verbalMemorySubtestR struct {
	Evaluation *Evaluation `boil:"Evaluation" json:"Evaluation" toml:"Evaluation" yaml:"Evaluation"`
}

// NewStruct creates a new relationship struct
func (*verbalMemorySubtestR) NewStruct() *verbalMemorySubtestR {
	return &verbalMemorySubtestR{}
}

func (o *VerbalMemorySubtest) GetEvaluation() *Evaluation {
	if o == nil {
		return nil
	}

	return o.R.GetEvaluation()
}

func (r *verbalMemorySubtestR) GetEvaluation() *Evaluation {
	if r == nil {
		return nil
	}

	return r.Evaluation
}

// verbalMemorySubtestL is where Load methods for each relationship are stored.
type verbalMemorySubtestL struct{}

var (
	verbalMemorySubtestAllColumns            = []string{"id", "evaluation_id", "seconds_from_start", "type", "given_words", "recalled_words", "score_score", "score_hits", "score_omissions", "score_intrusions", "score_perseverations", "score_accuracy", "score_intrusion_rate", "score_perseveration_rate", "assistan_analysis", "created_at"}
	verbalMemorySubtestColumnsWithoutDefault = []string{"id", "evaluation_id", "seconds_from_start", "type", "given_words", "recalled_words", "score_score", "score_hits", "score_omissions", "score_intrusions", "score_perseverations", "score_accuracy", "score_intrusion_rate", "score_perseveration_rate", "assistan_analysis"}
	verbalMemorySubtestColumnsWithDefault    = []string{"created_at"}
	verbalMemorySubtestPrimaryKeyColumns     = []string{"id"}
	verbalMemorySubtestGeneratedColumns      = []string{}
)

type (
	// VerbalMemorySubtestSlice is an alias for a slice of pointers to VerbalMemorySubtest.
	// This should almost always be used instead of []VerbalMemorySubtest.
	VerbalMemorySubtestSlice []*VerbalMemorySubtest
	// VerbalMemorySubtestHook is the signature for custom VerbalMemorySubtest hook methods
	VerbalMemorySubtestHook func(context.Context, boil.ContextExecutor, *VerbalMemorySubtest) error

	verbalMemorySubtestQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	verbalMemorySubtestType                 = reflect.TypeOf(&VerbalMemorySubtest{})
	verbalMemorySubtestMapping              = queries.MakeStructMapping(verbalMemorySubtestType)
	verbalMemorySubtestPrimaryKeyMapping, _ = queries.BindMapping(verbalMemorySubtestType, verbalMemorySubtestMapping, verbalMemorySubtestPrimaryKeyColumns)
	verbalMemorySubtestInsertCacheMut       sync.RWMutex
	verbalMemorySubtestInsertCache          = make(map[string]insertCache)
	verbalMemorySubtestUpdateCacheMut       sync.RWMutex
	verbalMemorySubtestUpdateCache          = make(map[string]updateCache)
	verbalMemorySubtestUpsertCacheMut       sync.RWMutex
	verbalMemorySubtestUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var verbalMemorySubtestAfterSelectMu sync.Mutex
var verbalMemorySubtestAfterSelectHooks []VerbalMemorySubtestHook

var verbalMemorySubtestBeforeInsertMu sync.Mutex
var verbalMemorySubtestBeforeInsertHooks []VerbalMemorySubtestHook
var verbalMemorySubtestAfterInsertMu sync.Mutex
var verbalMemorySubtestAfterInsertHooks []VerbalMemorySubtestHook

var verbalMemorySubtestBeforeUpdateMu sync.Mutex
var verbalMemorySubtestBeforeUpdateHooks []VerbalMemorySubtestHook
var verbalMemorySubtestAfterUpdateMu sync.Mutex
var verbalMemorySubtestAfterUpdateHooks []VerbalMemorySubtestHook

var verbalMemorySubtestBeforeDeleteMu sync.Mutex
var verbalMemorySubtestBeforeDeleteHooks []VerbalMemorySubtestHook
var verbalMemorySubtestAfterDeleteMu sync.Mutex
var verbalMemorySubtestAfterDeleteHooks []VerbalMemorySubtestHook

var verbalMemorySubtestBeforeUpsertMu sync.Mutex
var verbalMemorySubtestBeforeUpsertHooks []VerbalMemorySubtestHook
var verbalMemorySubtestAfterUpsertMu sync.Mutex
var verbalMemorySubtestAfterUpsertHooks []VerbalMemorySubtestHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *VerbalMemorySubtest) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range verbalMemorySubtestAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *VerbalMemorySubtest) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range verbalMemorySubtestBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *VerbalMemorySubtest) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range verbalMemorySubtestAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *VerbalMemorySubtest) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range verbalMemorySubtestBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *VerbalMemorySubtest) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range verbalMemorySubtestAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *VerbalMemorySubtest) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range verbalMemorySubtestBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *VerbalMemorySubtest) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range verbalMemorySubtestAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *VerbalMemorySubtest) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range verbalMemorySubtestBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *VerbalMemorySubtest) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range verbalMemorySubtestAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddVerbalMemorySubtestHook registers your hook function for all future operations.
func AddVerbalMemorySubtestHook(hookPoint boil.HookPoint, verbalMemorySubtestHook VerbalMemorySubtestHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		verbalMemorySubtestAfterSelectMu.Lock()
		verbalMemorySubtestAfterSelectHooks = append(verbalMemorySubtestAfterSelectHooks, verbalMemorySubtestHook)
		verbalMemorySubtestAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		verbalMemorySubtestBeforeInsertMu.Lock()
		verbalMemorySubtestBeforeInsertHooks = append(verbalMemorySubtestBeforeInsertHooks, verbalMemorySubtestHook)
		verbalMemorySubtestBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		verbalMemorySubtestAfterInsertMu.Lock()
		verbalMemorySubtestAfterInsertHooks = append(verbalMemorySubtestAfterInsertHooks, verbalMemorySubtestHook)
		verbalMemorySubtestAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		verbalMemorySubtestBeforeUpdateMu.Lock()
		verbalMemorySubtestBeforeUpdateHooks = append(verbalMemorySubtestBeforeUpdateHooks, verbalMemorySubtestHook)
		verbalMemorySubtestBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		verbalMemorySubtestAfterUpdateMu.Lock()
		verbalMemorySubtestAfterUpdateHooks = append(verbalMemorySubtestAfterUpdateHooks, verbalMemorySubtestHook)
		verbalMemorySubtestAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		verbalMemorySubtestBeforeDeleteMu.Lock()
		verbalMemorySubtestBeforeDeleteHooks = append(verbalMemorySubtestBeforeDeleteHooks, verbalMemorySubtestHook)
		verbalMemorySubtestBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		verbalMemorySubtestAfterDeleteMu.Lock()
		verbalMemorySubtestAfterDeleteHooks = append(verbalMemorySubtestAfterDeleteHooks, verbalMemorySubtestHook)
		verbalMemorySubtestAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		verbalMemorySubtestBeforeUpsertMu.Lock()
		verbalMemorySubtestBeforeUpsertHooks = append(verbalMemorySubtestBeforeUpsertHooks, verbalMemorySubtestHook)
		verbalMemorySubtestBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		verbalMemorySubtestAfterUpsertMu.Lock()
		verbalMemorySubtestAfterUpsertHooks = append(verbalMemorySubtestAfterUpsertHooks, verbalMemorySubtestHook)
		verbalMemorySubtestAfterUpsertMu.Unlock()
	}
}

// One returns a single verbalMemorySubtest record from the query.
func (q verbalMemorySubtestQuery) One(ctx context.Context, exec boil.ContextExecutor) (*VerbalMemorySubtest, error) {
	o := &VerbalMemorySubtest{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbmodels: failed to execute a one query for verbal_memory_subtests")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all VerbalMemorySubtest records from the query.
func (q verbalMemorySubtestQuery) All(ctx context.Context, exec boil.ContextExecutor) (VerbalMemorySubtestSlice, error) {
	var o []*VerbalMemorySubtest

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "dbmodels: failed to assign all query results to VerbalMemorySubtest slice")
	}

	if len(verbalMemorySubtestAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all VerbalMemorySubtest records in the query.
func (q verbalMemorySubtestQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to count verbal_memory_subtests rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q verbalMemorySubtestQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "dbmodels: failed to check if verbal_memory_subtests exists")
	}

	return count > 0, nil
}

// Evaluation pointed to by the foreign key.
func (o *VerbalMemorySubtest) Evaluation(mods ...qm.QueryMod) evaluationQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.EvaluationID),
	}

	queryMods = append(queryMods, mods...)

	return Evaluations(queryMods...)
}

// LoadEvaluation allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (verbalMemorySubtestL) LoadEvaluation(ctx context.Context, e boil.ContextExecutor, singular bool, maybeVerbalMemorySubtest interface{}, mods queries.Applicator) error {
	var slice []*VerbalMemorySubtest
	var object *VerbalMemorySubtest

	if singular {
		var ok bool
		object, ok = maybeVerbalMemorySubtest.(*VerbalMemorySubtest)
		if !ok {
			object = new(VerbalMemorySubtest)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeVerbalMemorySubtest)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeVerbalMemorySubtest))
			}
		}
	} else {
		s, ok := maybeVerbalMemorySubtest.(*[]*VerbalMemorySubtest)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeVerbalMemorySubtest)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeVerbalMemorySubtest))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &verbalMemorySubtestR{}
		}
		args[object.EvaluationID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &verbalMemorySubtestR{}
			}

			args[obj.EvaluationID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`evaluations`),
		qm.WhereIn(`evaluations.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Evaluation")
	}

	var resultSlice []*Evaluation
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Evaluation")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for evaluations")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for evaluations")
	}

	if len(evaluationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Evaluation = foreign
		if foreign.R == nil {
			foreign.R = &evaluationR{}
		}
		foreign.R.VerbalMemorySubtests = append(foreign.R.VerbalMemorySubtests, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.EvaluationID == foreign.ID {
				local.R.Evaluation = foreign
				if foreign.R == nil {
					foreign.R = &evaluationR{}
				}
				foreign.R.VerbalMemorySubtests = append(foreign.R.VerbalMemorySubtests, local)
				break
			}
		}
	}

	return nil
}

// SetEvaluation of the verbalMemorySubtest to the related item.
// Sets o.R.Evaluation to related.
// Adds o to related.R.VerbalMemorySubtests.
func (o *VerbalMemorySubtest) SetEvaluation(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Evaluation) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `verbal_memory_subtests` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"evaluation_id"}),
		strmangle.WhereClause("`", "`", 0, verbalMemorySubtestPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.EvaluationID = related.ID
	if o.R == nil {
		o.R = &verbalMemorySubtestR{
			Evaluation: related,
		}
	} else {
		o.R.Evaluation = related
	}

	if related.R == nil {
		related.R = &evaluationR{
			VerbalMemorySubtests: VerbalMemorySubtestSlice{o},
		}
	} else {
		related.R.VerbalMemorySubtests = append(related.R.VerbalMemorySubtests, o)
	}

	return nil
}

// VerbalMemorySubtests retrieves all the records using an executor.
func VerbalMemorySubtests(mods ...qm.QueryMod) verbalMemorySubtestQuery {
	mods = append(mods, qm.From("`verbal_memory_subtests`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`verbal_memory_subtests`.*"})
	}

	return verbalMemorySubtestQuery{q}
}

// FindVerbalMemorySubtest retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindVerbalMemorySubtest(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*VerbalMemorySubtest, error) {
	verbalMemorySubtestObj := &VerbalMemorySubtest{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `verbal_memory_subtests` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, verbalMemorySubtestObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbmodels: unable to select from verbal_memory_subtests")
	}

	if err = verbalMemorySubtestObj.doAfterSelectHooks(ctx, exec); err != nil {
		return verbalMemorySubtestObj, err
	}

	return verbalMemorySubtestObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *VerbalMemorySubtest) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("dbmodels: no verbal_memory_subtests provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(verbalMemorySubtestColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	verbalMemorySubtestInsertCacheMut.RLock()
	cache, cached := verbalMemorySubtestInsertCache[key]
	verbalMemorySubtestInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			verbalMemorySubtestAllColumns,
			verbalMemorySubtestColumnsWithDefault,
			verbalMemorySubtestColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(verbalMemorySubtestType, verbalMemorySubtestMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(verbalMemorySubtestType, verbalMemorySubtestMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `verbal_memory_subtests` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `verbal_memory_subtests` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `verbal_memory_subtests` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, verbalMemorySubtestPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to insert into verbal_memory_subtests")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to populate default values for verbal_memory_subtests")
	}

CacheNoHooks:
	if !cached {
		verbalMemorySubtestInsertCacheMut.Lock()
		verbalMemorySubtestInsertCache[key] = cache
		verbalMemorySubtestInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the VerbalMemorySubtest.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *VerbalMemorySubtest) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	verbalMemorySubtestUpdateCacheMut.RLock()
	cache, cached := verbalMemorySubtestUpdateCache[key]
	verbalMemorySubtestUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			verbalMemorySubtestAllColumns,
			verbalMemorySubtestPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("dbmodels: unable to update verbal_memory_subtests, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `verbal_memory_subtests` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, verbalMemorySubtestPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(verbalMemorySubtestType, verbalMemorySubtestMapping, append(wl, verbalMemorySubtestPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to update verbal_memory_subtests row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by update for verbal_memory_subtests")
	}

	if !cached {
		verbalMemorySubtestUpdateCacheMut.Lock()
		verbalMemorySubtestUpdateCache[key] = cache
		verbalMemorySubtestUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q verbalMemorySubtestQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to update all for verbal_memory_subtests")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to retrieve rows affected for verbal_memory_subtests")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o VerbalMemorySubtestSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("dbmodels: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), verbalMemorySubtestPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `verbal_memory_subtests` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, verbalMemorySubtestPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to update all in verbalMemorySubtest slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to retrieve rows affected all in update all verbalMemorySubtest")
	}
	return rowsAff, nil
}

var mySQLVerbalMemorySubtestUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *VerbalMemorySubtest) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("dbmodels: no verbal_memory_subtests provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(verbalMemorySubtestColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLVerbalMemorySubtestUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	verbalMemorySubtestUpsertCacheMut.RLock()
	cache, cached := verbalMemorySubtestUpsertCache[key]
	verbalMemorySubtestUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			verbalMemorySubtestAllColumns,
			verbalMemorySubtestColumnsWithDefault,
			verbalMemorySubtestColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			verbalMemorySubtestAllColumns,
			verbalMemorySubtestPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("dbmodels: unable to upsert verbal_memory_subtests, could not build update column list")
		}

		ret := strmangle.SetComplement(verbalMemorySubtestAllColumns, strmangle.SetIntersect(insert, update))

		cache.query = buildUpsertQueryMySQL(dialect, "`verbal_memory_subtests`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `verbal_memory_subtests` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(verbalMemorySubtestType, verbalMemorySubtestMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(verbalMemorySubtestType, verbalMemorySubtestMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to upsert for verbal_memory_subtests")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(verbalMemorySubtestType, verbalMemorySubtestMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to retrieve unique values for verbal_memory_subtests")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to populate default values for verbal_memory_subtests")
	}

CacheNoHooks:
	if !cached {
		verbalMemorySubtestUpsertCacheMut.Lock()
		verbalMemorySubtestUpsertCache[key] = cache
		verbalMemorySubtestUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single VerbalMemorySubtest record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *VerbalMemorySubtest) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("dbmodels: no VerbalMemorySubtest provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), verbalMemorySubtestPrimaryKeyMapping)
	sql := "DELETE FROM `verbal_memory_subtests` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to delete from verbal_memory_subtests")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by delete for verbal_memory_subtests")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q verbalMemorySubtestQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("dbmodels: no verbalMemorySubtestQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to delete all from verbal_memory_subtests")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by deleteall for verbal_memory_subtests")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o VerbalMemorySubtestSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(verbalMemorySubtestBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), verbalMemorySubtestPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `verbal_memory_subtests` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, verbalMemorySubtestPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to delete all from verbalMemorySubtest slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by deleteall for verbal_memory_subtests")
	}

	if len(verbalMemorySubtestAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *VerbalMemorySubtest) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindVerbalMemorySubtest(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *VerbalMemorySubtestSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := VerbalMemorySubtestSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), verbalMemorySubtestPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `verbal_memory_subtests`.* FROM `verbal_memory_subtests` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, verbalMemorySubtestPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to reload all in VerbalMemorySubtestSlice")
	}

	*o = slice

	return nil
}

// VerbalMemorySubtestExists checks if the VerbalMemorySubtest row exists.
func VerbalMemorySubtestExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `verbal_memory_subtests` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "dbmodels: unable to check if verbal_memory_subtests exists")
	}

	return exists, nil
}

// Exists checks if the VerbalMemorySubtest row exists.
func (o *VerbalMemorySubtest) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return VerbalMemorySubtestExists(ctx, exec, o.ID)
}
