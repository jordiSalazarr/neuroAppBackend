// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package dbmodels

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/sqlboiler/v4/queries/qm"
	"github.com/aarondl/sqlboiler/v4/queries/qmhelper"
	"github.com/aarondl/sqlboiler/v4/types"
	"github.com/aarondl/strmangle"
	"github.com/friendsofgo/errors"
)

// ClockDrawSubtestResult is an object representing the database table.
type ClockDrawSubtestResult struct {
	ID                    string     `boil:"id" json:"id" toml:"id" yaml:"id"`
	EvaluationID          string     `boil:"evaluation_id" json:"evaluation_id" toml:"evaluation_id" yaml:"evaluation_id"`
	Pass                  bool       `boil:"pass" json:"pass" toml:"pass" yaml:"pass"`
	Reasons               types.JSON `boil:"reasons" json:"reasons" toml:"reasons" yaml:"reasons"`
	CenterX               int        `boil:"center_x" json:"center_x" toml:"center_x" yaml:"center_x"`
	CenterY               int        `boil:"center_y" json:"center_y" toml:"center_y" yaml:"center_y"`
	Radius                float64    `boil:"radius" json:"radius" toml:"radius" yaml:"radius"`
	DialCircularity       float64    `boil:"dial_circularity" json:"dial_circularity" toml:"dial_circularity" yaml:"dial_circularity"`
	MinuteAngleDeg        float64    `boil:"minute_angle_deg" json:"minute_angle_deg" toml:"minute_angle_deg" yaml:"minute_angle_deg"`
	HourAngleDeg          float64    `boil:"hour_angle_deg" json:"hour_angle_deg" toml:"hour_angle_deg" yaml:"hour_angle_deg"`
	ExpectedMinuteAngle   float64    `boil:"expected_minute_angle" json:"expected_minute_angle" toml:"expected_minute_angle" yaml:"expected_minute_angle"`
	ExpectedHourAngle     float64    `boil:"expected_hour_angle" json:"expected_hour_angle" toml:"expected_hour_angle" yaml:"expected_hour_angle"`
	MinuteAngularErrorDeg float64    `boil:"minute_angular_error_deg" json:"minute_angular_error_deg" toml:"minute_angular_error_deg" yaml:"minute_angular_error_deg"`
	HourAngularErrorDeg   float64    `boil:"hour_angular_error_deg" json:"hour_angular_error_deg" toml:"hour_angular_error_deg" yaml:"hour_angular_error_deg"`
	CreatedAt             time.Time  `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt             time.Time  `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *clockDrawSubtestResultR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L clockDrawSubtestResultL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ClockDrawSubtestResultColumns = struct {
	ID                    string
	EvaluationID          string
	Pass                  string
	Reasons               string
	CenterX               string
	CenterY               string
	Radius                string
	DialCircularity       string
	MinuteAngleDeg        string
	HourAngleDeg          string
	ExpectedMinuteAngle   string
	ExpectedHourAngle     string
	MinuteAngularErrorDeg string
	HourAngularErrorDeg   string
	CreatedAt             string
	UpdatedAt             string
}{
	ID:                    "id",
	EvaluationID:          "evaluation_id",
	Pass:                  "pass",
	Reasons:               "reasons",
	CenterX:               "center_x",
	CenterY:               "center_y",
	Radius:                "radius",
	DialCircularity:       "dial_circularity",
	MinuteAngleDeg:        "minute_angle_deg",
	HourAngleDeg:          "hour_angle_deg",
	ExpectedMinuteAngle:   "expected_minute_angle",
	ExpectedHourAngle:     "expected_hour_angle",
	MinuteAngularErrorDeg: "minute_angular_error_deg",
	HourAngularErrorDeg:   "hour_angular_error_deg",
	CreatedAt:             "created_at",
	UpdatedAt:             "updated_at",
}

var ClockDrawSubtestResultTableColumns = struct {
	ID                    string
	EvaluationID          string
	Pass                  string
	Reasons               string
	CenterX               string
	CenterY               string
	Radius                string
	DialCircularity       string
	MinuteAngleDeg        string
	HourAngleDeg          string
	ExpectedMinuteAngle   string
	ExpectedHourAngle     string
	MinuteAngularErrorDeg string
	HourAngularErrorDeg   string
	CreatedAt             string
	UpdatedAt             string
}{
	ID:                    "clock_draw_subtest_results.id",
	EvaluationID:          "clock_draw_subtest_results.evaluation_id",
	Pass:                  "clock_draw_subtest_results.pass",
	Reasons:               "clock_draw_subtest_results.reasons",
	CenterX:               "clock_draw_subtest_results.center_x",
	CenterY:               "clock_draw_subtest_results.center_y",
	Radius:                "clock_draw_subtest_results.radius",
	DialCircularity:       "clock_draw_subtest_results.dial_circularity",
	MinuteAngleDeg:        "clock_draw_subtest_results.minute_angle_deg",
	HourAngleDeg:          "clock_draw_subtest_results.hour_angle_deg",
	ExpectedMinuteAngle:   "clock_draw_subtest_results.expected_minute_angle",
	ExpectedHourAngle:     "clock_draw_subtest_results.expected_hour_angle",
	MinuteAngularErrorDeg: "clock_draw_subtest_results.minute_angular_error_deg",
	HourAngularErrorDeg:   "clock_draw_subtest_results.hour_angular_error_deg",
	CreatedAt:             "clock_draw_subtest_results.created_at",
	UpdatedAt:             "clock_draw_subtest_results.updated_at",
}

// Generated where

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod   { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod   { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod   { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) LIKE(x string) qm.QueryMod  { return qm.Where(w.field+" LIKE ?", x) }
func (w whereHelperstring) NLIKE(x string) qm.QueryMod { return qm.Where(w.field+" NOT LIKE ?", x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelperbool struct{ field string }

func (w whereHelperbool) EQ(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperbool) NEQ(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperbool) LT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperbool) LTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperbool) GT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperbool) GTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

type whereHelpertypes_JSON struct{ field string }

func (w whereHelpertypes_JSON) EQ(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertypes_JSON) NEQ(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertypes_JSON) LT(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertypes_JSON) LTE(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertypes_JSON) GT(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertypes_JSON) GTE(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelperint struct{ field string }

func (w whereHelperint) EQ(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint) NEQ(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint) LT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint) LTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint) GT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint) GTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelperfloat64 struct{ field string }

func (w whereHelperfloat64) EQ(x float64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperfloat64) NEQ(x float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelperfloat64) LT(x float64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperfloat64) LTE(x float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperfloat64) GT(x float64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperfloat64) GTE(x float64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelperfloat64) IN(slice []float64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperfloat64) NIN(slice []float64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var ClockDrawSubtestResultWhere = struct {
	ID                    whereHelperstring
	EvaluationID          whereHelperstring
	Pass                  whereHelperbool
	Reasons               whereHelpertypes_JSON
	CenterX               whereHelperint
	CenterY               whereHelperint
	Radius                whereHelperfloat64
	DialCircularity       whereHelperfloat64
	MinuteAngleDeg        whereHelperfloat64
	HourAngleDeg          whereHelperfloat64
	ExpectedMinuteAngle   whereHelperfloat64
	ExpectedHourAngle     whereHelperfloat64
	MinuteAngularErrorDeg whereHelperfloat64
	HourAngularErrorDeg   whereHelperfloat64
	CreatedAt             whereHelpertime_Time
	UpdatedAt             whereHelpertime_Time
}{
	ID:                    whereHelperstring{field: "`clock_draw_subtest_results`.`id`"},
	EvaluationID:          whereHelperstring{field: "`clock_draw_subtest_results`.`evaluation_id`"},
	Pass:                  whereHelperbool{field: "`clock_draw_subtest_results`.`pass`"},
	Reasons:               whereHelpertypes_JSON{field: "`clock_draw_subtest_results`.`reasons`"},
	CenterX:               whereHelperint{field: "`clock_draw_subtest_results`.`center_x`"},
	CenterY:               whereHelperint{field: "`clock_draw_subtest_results`.`center_y`"},
	Radius:                whereHelperfloat64{field: "`clock_draw_subtest_results`.`radius`"},
	DialCircularity:       whereHelperfloat64{field: "`clock_draw_subtest_results`.`dial_circularity`"},
	MinuteAngleDeg:        whereHelperfloat64{field: "`clock_draw_subtest_results`.`minute_angle_deg`"},
	HourAngleDeg:          whereHelperfloat64{field: "`clock_draw_subtest_results`.`hour_angle_deg`"},
	ExpectedMinuteAngle:   whereHelperfloat64{field: "`clock_draw_subtest_results`.`expected_minute_angle`"},
	ExpectedHourAngle:     whereHelperfloat64{field: "`clock_draw_subtest_results`.`expected_hour_angle`"},
	MinuteAngularErrorDeg: whereHelperfloat64{field: "`clock_draw_subtest_results`.`minute_angular_error_deg`"},
	HourAngularErrorDeg:   whereHelperfloat64{field: "`clock_draw_subtest_results`.`hour_angular_error_deg`"},
	CreatedAt:             whereHelpertime_Time{field: "`clock_draw_subtest_results`.`created_at`"},
	UpdatedAt:             whereHelpertime_Time{field: "`clock_draw_subtest_results`.`updated_at`"},
}

// ClockDrawSubtestResultRels is where relationship names are stored.
var ClockDrawSubtestResultRels = struct {
}{}

// clockDrawSubtestResultR is where relationships are stored.
type clockDrawSubtestResultR struct {
}

// NewStruct creates a new relationship struct
func (*clockDrawSubtestResultR) NewStruct() *clockDrawSubtestResultR {
	return &clockDrawSubtestResultR{}
}

// clockDrawSubtestResultL is where Load methods for each relationship are stored.
type clockDrawSubtestResultL struct{}

var (
	clockDrawSubtestResultAllColumns            = []string{"id", "evaluation_id", "pass", "reasons", "center_x", "center_y", "radius", "dial_circularity", "minute_angle_deg", "hour_angle_deg", "expected_minute_angle", "expected_hour_angle", "minute_angular_error_deg", "hour_angular_error_deg", "created_at", "updated_at"}
	clockDrawSubtestResultColumnsWithoutDefault = []string{"id", "evaluation_id", "pass", "reasons", "center_x", "center_y", "radius", "dial_circularity", "minute_angle_deg", "hour_angle_deg", "expected_minute_angle", "expected_hour_angle", "minute_angular_error_deg", "hour_angular_error_deg", "created_at", "updated_at"}
	clockDrawSubtestResultColumnsWithDefault    = []string{}
	clockDrawSubtestResultPrimaryKeyColumns     = []string{"id"}
	clockDrawSubtestResultGeneratedColumns      = []string{}
)

type (
	// ClockDrawSubtestResultSlice is an alias for a slice of pointers to ClockDrawSubtestResult.
	// This should almost always be used instead of []ClockDrawSubtestResult.
	ClockDrawSubtestResultSlice []*ClockDrawSubtestResult
	// ClockDrawSubtestResultHook is the signature for custom ClockDrawSubtestResult hook methods
	ClockDrawSubtestResultHook func(context.Context, boil.ContextExecutor, *ClockDrawSubtestResult) error

	clockDrawSubtestResultQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	clockDrawSubtestResultType                 = reflect.TypeOf(&ClockDrawSubtestResult{})
	clockDrawSubtestResultMapping              = queries.MakeStructMapping(clockDrawSubtestResultType)
	clockDrawSubtestResultPrimaryKeyMapping, _ = queries.BindMapping(clockDrawSubtestResultType, clockDrawSubtestResultMapping, clockDrawSubtestResultPrimaryKeyColumns)
	clockDrawSubtestResultInsertCacheMut       sync.RWMutex
	clockDrawSubtestResultInsertCache          = make(map[string]insertCache)
	clockDrawSubtestResultUpdateCacheMut       sync.RWMutex
	clockDrawSubtestResultUpdateCache          = make(map[string]updateCache)
	clockDrawSubtestResultUpsertCacheMut       sync.RWMutex
	clockDrawSubtestResultUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var clockDrawSubtestResultAfterSelectMu sync.Mutex
var clockDrawSubtestResultAfterSelectHooks []ClockDrawSubtestResultHook

var clockDrawSubtestResultBeforeInsertMu sync.Mutex
var clockDrawSubtestResultBeforeInsertHooks []ClockDrawSubtestResultHook
var clockDrawSubtestResultAfterInsertMu sync.Mutex
var clockDrawSubtestResultAfterInsertHooks []ClockDrawSubtestResultHook

var clockDrawSubtestResultBeforeUpdateMu sync.Mutex
var clockDrawSubtestResultBeforeUpdateHooks []ClockDrawSubtestResultHook
var clockDrawSubtestResultAfterUpdateMu sync.Mutex
var clockDrawSubtestResultAfterUpdateHooks []ClockDrawSubtestResultHook

var clockDrawSubtestResultBeforeDeleteMu sync.Mutex
var clockDrawSubtestResultBeforeDeleteHooks []ClockDrawSubtestResultHook
var clockDrawSubtestResultAfterDeleteMu sync.Mutex
var clockDrawSubtestResultAfterDeleteHooks []ClockDrawSubtestResultHook

var clockDrawSubtestResultBeforeUpsertMu sync.Mutex
var clockDrawSubtestResultBeforeUpsertHooks []ClockDrawSubtestResultHook
var clockDrawSubtestResultAfterUpsertMu sync.Mutex
var clockDrawSubtestResultAfterUpsertHooks []ClockDrawSubtestResultHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ClockDrawSubtestResult) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range clockDrawSubtestResultAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ClockDrawSubtestResult) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range clockDrawSubtestResultBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ClockDrawSubtestResult) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range clockDrawSubtestResultAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ClockDrawSubtestResult) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range clockDrawSubtestResultBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ClockDrawSubtestResult) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range clockDrawSubtestResultAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ClockDrawSubtestResult) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range clockDrawSubtestResultBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ClockDrawSubtestResult) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range clockDrawSubtestResultAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ClockDrawSubtestResult) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range clockDrawSubtestResultBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ClockDrawSubtestResult) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range clockDrawSubtestResultAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddClockDrawSubtestResultHook registers your hook function for all future operations.
func AddClockDrawSubtestResultHook(hookPoint boil.HookPoint, clockDrawSubtestResultHook ClockDrawSubtestResultHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		clockDrawSubtestResultAfterSelectMu.Lock()
		clockDrawSubtestResultAfterSelectHooks = append(clockDrawSubtestResultAfterSelectHooks, clockDrawSubtestResultHook)
		clockDrawSubtestResultAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		clockDrawSubtestResultBeforeInsertMu.Lock()
		clockDrawSubtestResultBeforeInsertHooks = append(clockDrawSubtestResultBeforeInsertHooks, clockDrawSubtestResultHook)
		clockDrawSubtestResultBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		clockDrawSubtestResultAfterInsertMu.Lock()
		clockDrawSubtestResultAfterInsertHooks = append(clockDrawSubtestResultAfterInsertHooks, clockDrawSubtestResultHook)
		clockDrawSubtestResultAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		clockDrawSubtestResultBeforeUpdateMu.Lock()
		clockDrawSubtestResultBeforeUpdateHooks = append(clockDrawSubtestResultBeforeUpdateHooks, clockDrawSubtestResultHook)
		clockDrawSubtestResultBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		clockDrawSubtestResultAfterUpdateMu.Lock()
		clockDrawSubtestResultAfterUpdateHooks = append(clockDrawSubtestResultAfterUpdateHooks, clockDrawSubtestResultHook)
		clockDrawSubtestResultAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		clockDrawSubtestResultBeforeDeleteMu.Lock()
		clockDrawSubtestResultBeforeDeleteHooks = append(clockDrawSubtestResultBeforeDeleteHooks, clockDrawSubtestResultHook)
		clockDrawSubtestResultBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		clockDrawSubtestResultAfterDeleteMu.Lock()
		clockDrawSubtestResultAfterDeleteHooks = append(clockDrawSubtestResultAfterDeleteHooks, clockDrawSubtestResultHook)
		clockDrawSubtestResultAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		clockDrawSubtestResultBeforeUpsertMu.Lock()
		clockDrawSubtestResultBeforeUpsertHooks = append(clockDrawSubtestResultBeforeUpsertHooks, clockDrawSubtestResultHook)
		clockDrawSubtestResultBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		clockDrawSubtestResultAfterUpsertMu.Lock()
		clockDrawSubtestResultAfterUpsertHooks = append(clockDrawSubtestResultAfterUpsertHooks, clockDrawSubtestResultHook)
		clockDrawSubtestResultAfterUpsertMu.Unlock()
	}
}

// One returns a single clockDrawSubtestResult record from the query.
func (q clockDrawSubtestResultQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ClockDrawSubtestResult, error) {
	o := &ClockDrawSubtestResult{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbmodels: failed to execute a one query for clock_draw_subtest_results")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ClockDrawSubtestResult records from the query.
func (q clockDrawSubtestResultQuery) All(ctx context.Context, exec boil.ContextExecutor) (ClockDrawSubtestResultSlice, error) {
	var o []*ClockDrawSubtestResult

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "dbmodels: failed to assign all query results to ClockDrawSubtestResult slice")
	}

	if len(clockDrawSubtestResultAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ClockDrawSubtestResult records in the query.
func (q clockDrawSubtestResultQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to count clock_draw_subtest_results rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q clockDrawSubtestResultQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "dbmodels: failed to check if clock_draw_subtest_results exists")
	}

	return count > 0, nil
}

// ClockDrawSubtestResults retrieves all the records using an executor.
func ClockDrawSubtestResults(mods ...qm.QueryMod) clockDrawSubtestResultQuery {
	mods = append(mods, qm.From("`clock_draw_subtest_results`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`clock_draw_subtest_results`.*"})
	}

	return clockDrawSubtestResultQuery{q}
}

// FindClockDrawSubtestResult retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindClockDrawSubtestResult(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*ClockDrawSubtestResult, error) {
	clockDrawSubtestResultObj := &ClockDrawSubtestResult{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `clock_draw_subtest_results` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, clockDrawSubtestResultObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "dbmodels: unable to select from clock_draw_subtest_results")
	}

	if err = clockDrawSubtestResultObj.doAfterSelectHooks(ctx, exec); err != nil {
		return clockDrawSubtestResultObj, err
	}

	return clockDrawSubtestResultObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ClockDrawSubtestResult) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("dbmodels: no clock_draw_subtest_results provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(clockDrawSubtestResultColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	clockDrawSubtestResultInsertCacheMut.RLock()
	cache, cached := clockDrawSubtestResultInsertCache[key]
	clockDrawSubtestResultInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			clockDrawSubtestResultAllColumns,
			clockDrawSubtestResultColumnsWithDefault,
			clockDrawSubtestResultColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(clockDrawSubtestResultType, clockDrawSubtestResultMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(clockDrawSubtestResultType, clockDrawSubtestResultMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `clock_draw_subtest_results` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `clock_draw_subtest_results` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `clock_draw_subtest_results` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, clockDrawSubtestResultPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to insert into clock_draw_subtest_results")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to populate default values for clock_draw_subtest_results")
	}

CacheNoHooks:
	if !cached {
		clockDrawSubtestResultInsertCacheMut.Lock()
		clockDrawSubtestResultInsertCache[key] = cache
		clockDrawSubtestResultInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the ClockDrawSubtestResult.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ClockDrawSubtestResult) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	clockDrawSubtestResultUpdateCacheMut.RLock()
	cache, cached := clockDrawSubtestResultUpdateCache[key]
	clockDrawSubtestResultUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			clockDrawSubtestResultAllColumns,
			clockDrawSubtestResultPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("dbmodels: unable to update clock_draw_subtest_results, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `clock_draw_subtest_results` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, clockDrawSubtestResultPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(clockDrawSubtestResultType, clockDrawSubtestResultMapping, append(wl, clockDrawSubtestResultPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to update clock_draw_subtest_results row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by update for clock_draw_subtest_results")
	}

	if !cached {
		clockDrawSubtestResultUpdateCacheMut.Lock()
		clockDrawSubtestResultUpdateCache[key] = cache
		clockDrawSubtestResultUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q clockDrawSubtestResultQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to update all for clock_draw_subtest_results")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to retrieve rows affected for clock_draw_subtest_results")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ClockDrawSubtestResultSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("dbmodels: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), clockDrawSubtestResultPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `clock_draw_subtest_results` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, clockDrawSubtestResultPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to update all in clockDrawSubtestResult slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to retrieve rows affected all in update all clockDrawSubtestResult")
	}
	return rowsAff, nil
}

var mySQLClockDrawSubtestResultUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ClockDrawSubtestResult) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("dbmodels: no clock_draw_subtest_results provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(clockDrawSubtestResultColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLClockDrawSubtestResultUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	clockDrawSubtestResultUpsertCacheMut.RLock()
	cache, cached := clockDrawSubtestResultUpsertCache[key]
	clockDrawSubtestResultUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			clockDrawSubtestResultAllColumns,
			clockDrawSubtestResultColumnsWithDefault,
			clockDrawSubtestResultColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			clockDrawSubtestResultAllColumns,
			clockDrawSubtestResultPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("dbmodels: unable to upsert clock_draw_subtest_results, could not build update column list")
		}

		ret := strmangle.SetComplement(clockDrawSubtestResultAllColumns, strmangle.SetIntersect(insert, update))

		cache.query = buildUpsertQueryMySQL(dialect, "`clock_draw_subtest_results`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `clock_draw_subtest_results` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(clockDrawSubtestResultType, clockDrawSubtestResultMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(clockDrawSubtestResultType, clockDrawSubtestResultMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to upsert for clock_draw_subtest_results")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(clockDrawSubtestResultType, clockDrawSubtestResultMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to retrieve unique values for clock_draw_subtest_results")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to populate default values for clock_draw_subtest_results")
	}

CacheNoHooks:
	if !cached {
		clockDrawSubtestResultUpsertCacheMut.Lock()
		clockDrawSubtestResultUpsertCache[key] = cache
		clockDrawSubtestResultUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single ClockDrawSubtestResult record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ClockDrawSubtestResult) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("dbmodels: no ClockDrawSubtestResult provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), clockDrawSubtestResultPrimaryKeyMapping)
	sql := "DELETE FROM `clock_draw_subtest_results` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to delete from clock_draw_subtest_results")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by delete for clock_draw_subtest_results")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q clockDrawSubtestResultQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("dbmodels: no clockDrawSubtestResultQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to delete all from clock_draw_subtest_results")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by deleteall for clock_draw_subtest_results")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ClockDrawSubtestResultSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(clockDrawSubtestResultBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), clockDrawSubtestResultPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `clock_draw_subtest_results` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, clockDrawSubtestResultPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: unable to delete all from clockDrawSubtestResult slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "dbmodels: failed to get rows affected by deleteall for clock_draw_subtest_results")
	}

	if len(clockDrawSubtestResultAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ClockDrawSubtestResult) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindClockDrawSubtestResult(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ClockDrawSubtestResultSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ClockDrawSubtestResultSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), clockDrawSubtestResultPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `clock_draw_subtest_results`.* FROM `clock_draw_subtest_results` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, clockDrawSubtestResultPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "dbmodels: unable to reload all in ClockDrawSubtestResultSlice")
	}

	*o = slice

	return nil
}

// ClockDrawSubtestResultExists checks if the ClockDrawSubtestResult row exists.
func ClockDrawSubtestResultExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `clock_draw_subtest_results` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "dbmodels: unable to check if clock_draw_subtest_results exists")
	}

	return exists, nil
}

// Exists checks if the ClockDrawSubtestResult row exists.
func (o *ClockDrawSubtestResult) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ClockDrawSubtestResultExists(ctx, exec, o.ID)
}
